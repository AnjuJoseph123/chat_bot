,Tutorial
0,"A great international shopping experience is one that may not immediately indicate you’re buying from another country. It’s an experience where things like product descriptions are translated into languages you understand, prices are represented in familiar currencies and cadences, and preferred payment methods are available to you at checkout even though you’re buying something from half-way around the world. Most importantly though, it makes you feel confident and comfortable in your purchase.The process is called localization, and represents one of your biggest growth opportunities. Whether you’re a Shopify Partner, Developer, or merchant. Withmore and more consumers shopping cross-border, it’s becoming more obvious that global ecommerce isn’t just an option anymore; it’s a necessity, and your client’s success depends on it.For instance, COVID-19 fuelled rapid acceleration of online buying in several markets that were previously lagging. India, Brazil, Russia, and Argentina are all projected to post at least26 percent growthin retail ecommerce sales this year.Are your clients’ online stores or your app equipped to leverage this trend by selling to a customer in Spanish? What about displaying prices in rubles, or displaying the duties and taxes to a customer in India?Today, more than27 percent of all traffic on Shopify online stores is from international buyers—and yet cross-border traffic continues to convert at a significantly lower rate than domestic, in large part due to poor customer experiences.Shopify Markets, our new global commerce solution, aims to fix this with custom buying experiences by market, while also enabling you and your clients to reach new markets and customers, and scale faster with settings that automatically optimize businesses across markets.And you can now further improve your client’s customers’ experience by providing them with exclusive content or products based on where they’re shopping from, such as:Displaying a different home page banner to different countriesHiding products on collection pages that don’t ship to certain countriesChanging content on a product page based on countryIn this tutorial, we’ll cover how to serve content and products to targeted countries or regions, so you and your clients can maximize brand reach and improve customers’ and users’ overall experience. Let’s get started.Grow your business with the Shopify Partner ProgramWhether you offer web design and development services or want to build apps for the Shopify App Store, the Shopify Partner Program will set you up for success. Join for free and access revenue share opportunities, developer preview environments, and educational resources.Sign upPrerequisites to customizing content by country or regionNOTE:This is an advanced tutorial that requires knowledge ofShopify Liquid.First, you’ll need to be logged into the store you want to work on and have permissions to accessOnline Store Themeediting as well asProducts, which is where we will be working out of. This could be your own store, or a collaborator account on your client’s store.If you don’t have a login, then request one from your admin or client directly. This tutorial will use Shopify’s Dawn theme as an example, however, the approaches outlined below are theme agnostic and can be applied to your theme of choice.Install the Dawn themeif you want to follow along to this tutorial exactly.Second, country is considered acontexton the Shopify platform. To change content based on a customer’s country, you need to place them into the correctcontext. To do this, you should be using a country selector, at a minimum. Country selectors allow your customers to choose their context (e.g. Canada, United States, Australia).Dawn comes with country selection built in. If you’re using another theme, you can alsoadd your own country selectorsusing this guide, or by usingShopify’s Geolocation app. If you’re using an oldcurrency selector, you should update it to use the country context.Finally, you should be familiar with both thelocalizationandcountryLiquid objects to leverage this tutorial.How to customize content by country in ShopifyUsing thelocalizationandcountryobjects, you can wrap content that conditionally shows, hides, or changes content based on the customer’s context. For example:NOTE:You should use the country ISO code, and notlocalization.country.name. Country names will be translated when you offer multiple languages and will result in conditional content only working in one language.This approach can be used in a variety of ways, which we’ll display using Shopify’sDawntheme.Change product content based on countryLet’s say you have a client who wants to direct customers to a merchant’s website in certain countries or regions, instead of showing themAdd to cartorOut of stock.Navigate to Dawn in your themes section, click onActions, thenEdit Code, and find themain-product.liquidsection. Here, you can make the following change on line 300:You’ll also need to make a small, additional change to ensure that the dynamic checkout button is hidden in these cases as well, on line 310:On the left, a customer in the UK is directed to an external retailer's website, while on the right, a customer in Canada can add to cart and buy directly on the website.In this example, all products for which your client has an exclusive retailer agreement in the United Kingdom are uniquely taggeddo_not_sell_to_UK, which means they don’t sell them on their own website, and instead of anAdd to cartoption, they direct their customers to that retailer.TIP:if your clients only sell certain products to certain countries, then useShipping Profilesto restrict shipping in checkout, in addition to contextualizing their online store content.Change collection content based on countrySimilarly, you can hide those products from being displayed on collection pages as well. Again, the Blue Silk Tuxedo has been tagged withdo_not_sell_to_UK, and we want to hide it from collection pages when someone is browsing from the United Kingdom by editing themain-collection-product-gridsection:As the Blue Silk Tuxedo isn’t eligible for direct sale in the UK, it’s hidden from collection pages when the customer’s context is set to the United Kingdom.Whereas in this example, customers in Canada can see the Blue Silk Tuxedo on collection pages.Change theme sections based on countryYou can also leverage thelocalizationandcountryobjects to change theme content based on country—like a banner on the homepage. Using the same Canadian client example as above, perhaps they would like to have a temporary homepage banner wishing their US customers a Happy Thanksgiving. There are a couple of different things you can do to make this possible.First, inside theimage-banner.liquidfile of the Dawn theme, you can make an addition to the top of thetheme schema:For brevity, this example produces a basic text field where a merchant can input a two-letter ISO code when adding anImage bannersection to their homepage.Changes to the schema in theimage-banner.liquidfile results in a simple text box added to the section in the theme editor. However, it would also be possible to build adropdown listof countries, or something similar, that the merchant could select from instead.Next, you can add a control flow statement that wraps all of the content in theimage-banner.liquidfile. This statement will either show or hide the section based on the country inputted into the text field above.Below is the entireimage-banner.liquidfile, with the added control flow statements opened on lines 5 and 6, and closed on lines 114 and 115:Now you can add multiple banners into the theme customizer, and by inputting theISO codeof any country or region you have enabled inSettings, switching between those countries will reveal a different home page banner:On the left-hand side, our default Canadian home page banner. On the right-hand side, the home page banner is switched out when the customer context is set to the United States.If no country code is entered into the theme settings, then the theme section will display to all countries.Congrats! You’ve now contextualized your store contentThis tutorial has demonstrated three popular examples of how products, collections, and content can be customized based on country using simple control flow tags, and the country and localization liquid objects. These are just a few examples of how your website content can be adapted based on your users’ or client’s customers’ country, but you can adapt this approach to many other use cases.How do you plan to leverage localized and contextualized content? Let us know in the comments below!"
1,"Customizing Shopify email notifications is a frequent request from clients who are looking to optimize their communications with customers, and can be one of the easiest methods to personalize a Shopify store. Carefully designed emails are a powerful tool for communication, enabling clients to add a personal touch at different points of the purchase journey, and can be an extra valuable tool during busy shopping events like BFCM.In contrast to thebusiness email format, these types of emails are sent automatically following an order to update customers on shipping,abandoned checkouts, and customer accounts—so there’s a lot of scope for improving these experiences. By upselling a client on bespoke emails, you can add extra value to your project.In this article, we’ll look at some practical ways you can add additional functionality to Shopify email notifications, and grow your Liquid expertise.Learning Liquid: Getting Started with Shopify ThemingGet this free guide and learn practical tips, tricks, and techniques to start modifying, developing, and building Shopify themes.EmailGet free copyBy entering your email - we’ll also send you marketing emails related to Shopify. You can unsubscribe anytime. Note: the guide won't be delivered to role-based emails, like info@, developer@, etc.Our virtual cogs are turning.Please note that it can take upto 15 minutes for our emailto reach your inbox.Why customize Shopify email notifications for clients?As online businesses become increasingly engaged across various channels, customers have come to expect a seamless experience at every touchpoint (take a look atsubscription-based email marketingfor example). Email can often be overlooked in favor of more immediate UX considerations—but given that every customer will receive email notifications, it’s critical that email communicates with your client’s customers effectively and appropriately.""It’s critical that email communicates with your client’s customers effectively and appropriately.""Personalized emails allow your client to maintain a look and feel that’s consistent with the rest of their brand. By embedding on-brand images, and rewording text to conform with a brand’s tone, your client can stay close to their audience.It’s also possible to amplify the value of your client’s products by adding extra content to these notifications. Some products may have instructions that can be included as text within these emails, while others could link to a video.Being strategic about how abandoned checkout emails are sent can also open up a range of marketing opportunities. By applying a discount code to the abandoned checkout email, your clients can leverage this chance to boost conversions, since the discount would be an incentive to complete the sale.Grow your business with the Shopify Partner ProgramWhether you offer web design and development services or want to build apps for the Shopify App Store, the Shopify Partner Program will set you up for success. Join for free and access revenue share opportunities, developer preview environments, and educational resources.Sign upHow to customize email notificationsShopify sends notifications to customers when different actions take place. There are16 notificationsthat customers can receive, including order confirmation and abandoned checkout.Each one of these notification templates can be customized to include custom HTML and CSS, which means there’s a lot of room to showcase your client’s brand. It’s important to carefully consider what kinds of customizations would suit each particular client.There’s a range ofemail-specific Liquid variablesthat can be used for many different purposes. Whether you’re looking to output customer info or product features, we’re sure that you’ll find something that can improve email notifications for your clients.With this in mind, here are two customizations that can add advanced functionality to Shopify email notifications.1. Add conditional content using Liquid operatorsIt’s possible to display specific content for individual products on an email, usingconditional Liquid operators. Withifstatements you can add text, or images, that will appear when a product fulfills criteria that you set up.As well as Liquid operators, you will also use the line item object, which allows you to reference particular properties of a product that’s in a customer’s shopping cart. Each line item represents a single line in the customer’s shopping cart and they can also be used in email notifications to isolate individual properties of a product. You can see all the different variables in ourLiquid documentation.You might also like:How Smart Design Patterns can Improve Store Conversions.For example, your client could have a set of products that have a unique set of instructions—maybe they are downloadable products and there are specific steps to follow for a customer to get one of them. In this case, you could add conditional Liquidifstatements that would output these instructions, if a product contained a specific word in its title.The code for this would consist of anifstatement usingcontainsto check for the presence of a specific word, in this example “Book”, within the product title:{% if line.title contains 'Book' %}<p>These are the instructions for the Book</p>{% endif %}The location of where this message appears would be up to you, but a common placement could be below the title of the product. In that case, you could add the code within the cell that contains theline.variant.titleline item, and above the closing</td>tag. This could look like the below image:Now when a customer orders a product with “Book” in the title, they would see the specific message on their order notification email below the product title. To the customer, the email would appear like this:This is a simple yet powerful way to display product-specific content within emails, and could potentially save clients from customer frustration if products require installation or other post-purchase actions. Even if clients simply want to send a friendly message for certain products, it’s a perfect way to introduce creativity into email notifications.You might also like:The 10 Best Markdown Editors.2. Apply discount codes on abandoned checkout emailsAccording to the Baymard Institute, 69 percent ofonline shopping cartsare abandoned before the customer completes a sale, which represents a huge loss of potential sales for your clients. Recovering abandoned carts can be a huge challenge, so if you can improve results in this area, you’ll add a lot of value to your client projects (and potentially be able to justify charging more).""According to the Baymard Institute, 69 percent of online shopping carts are abandoned before the customer completes a sale.""Generally,abandoned checkout emailsare sent a few hours after the potential customer “bounced” away (you can read our guide to decreasingbounce rate), so if they receive an encouraging email with a discount code, they could be motivated to complete the sale. Thankfully, it’s possible to apply an automatic discount to an abandoned checkout recovery email to incentivize these would-be customers.To achieve this effect, you would first need to create apercentage discount codeor amonetary discount code, depending on the type of promotion your client would like to offer. Once this discount has been created, make a note of the name assigned to the discount code, for example “WelcomeBack”. This name will be needed when you are customizing the notification template.Next, on the abandoned checkout notification template, you’ll need to change the destination of the “Complete your purchase” call-to-action button. Usually when a customer clicks to complete their purchase, they’re directed to the checkout, and their previously chosen products are pre-loaded. We can follow this same process, but apply the discount we created, by changing the default URL to a URL containing the discount.You’ll need to find the line that includes:<td class=""button__cell""><a href=""{{ url }}"" class=""button__text"">Complete your purchase</a></td>And the line that includes{{ shop.url }}:The URL variables here will need to be replaced with a code snippet that appends text to the URL so that it includes the discount. This snippet of code would look like this:{% if url contains '?' %}{{ url | append: '&discount=WelcomeBack' }}{% else %}{{ url | append: '?&discount=WelcomeBack' }}{% endif %}Once you’ve replaced{{ shop.url }}and{{ url }}with the snippet noted above, your email notification should appear like this:view rawemail-notification-discount-code.liquidhosted with ❤ byGitHubFinally, you can add some text to the abandoned checkout email template informing your client’s customer that a discount was applied. This could look something like this:view rawemail-notification-discount-text.liquidhosted with ❤ byGitHubNow when a customer clicks on the call-to-action button on the email, they’ll be directed to the checkout of your client’s store, with their pre-loaded products and a discount applied. This is exactly the kind of sweetener that will drive conversions for your clients!You might also like:Canonical URLs: What Are They and Why Are They Important?Make sure that you test!Regardless of your design, you’ll have to test each email to ensure the output looks right from a customer’s perspective. As developers, we should always be thinking about how the end product will look and feel for our client’s customers. On thenotification settings pagethere are two options for testing, by previewing the notification or by sending a test email.The preview function is very helpful if you are making quick edits, but it’s advised that a test email should be sent once you’re finished working on a template. Better still is to go through the actual process with a test order, to look out for any possible pain points you could have missed, so that you are 100 percent sure that everything will run smoothly.Have you experimented with customized Shopify email notifications and added new functionality to emails?We’d love to hear from you in the comments below!"
2,"As a Shopify Partner, you’ve almost certainly come acrossdevelopment stores, the free Shopify account that allows you to build stores for clients and test out new themes and apps. Development stores are a key component of building for Shopify, and offer tons of opportunity to explore what the platform has to offer. But what if you have a client who already has a Shopify store? What if you’ve been hired to spruce up the design of an existing store, or launch a new marketing initiative? In that case, it’s time to usea Shopify collaborator account.In this article, we walk you through what a Shopify collaborator account is, how to request access to your client’s store, and how to use collaborator accounts to make your client’s experience even better.Before the introduction of collaborator accounts in 2017, you had to be added to a merchant’s store as a staff account if you wanted to do any work on it. This wasn’t ideal—staff accounts are limiteddepending on which plan the merchant is on. It also meant that you had to keep track of all the different logins for the multiple stores you were working on.Collaborator accounts were the solution. Today, you can simplyrequest accessto your client’s store directly through your Partner Dashboard. The store owner receives an email with your request, approves you for the specific permissions you need to do your job, and you’re good to start working.""Managed stores are all accessible from your Partner Dashboard, so no more remembering a dozen different logins.""Your managed stores are all accessible from your Partner Dashboard, so no more remembering a dozen different logins. And since collaborator accounts don’t count towards a merchant’s total staff number, merchants have the flexibility to add you whenever they need you.You might also like:How to Customize Shopify Email Notifications for Clients.Requesting access to a client’s storeThe process for requesting access to your client’s store is simple.In yourPartner Dashboard, clickStores.ClickAdd store.For type of store, chooseManaged store.Enter the URL of the store.In thePermissionssection, select the sections of the store you want to access, or checkFull access. Remember that the store owner can change these permissions after your account is created. See below for more information on permissions.If you’d like, include a message to the store owner in theAdd a messagesection.ClickSave.Once you send your request, an email will be sent to the store owner and a notification will appear on their Shopify Home, asking them to approve you. Requests expire after seven days, but don’t worry—you can always re-request access after the expiration date.Your client gets notified when you request access to their store via a collaborator account.Collaborator accounts give you access to your client’s Shopify admin but don’t count toward their staff account limit.Once your client has approved you, you’ll be able to access their store—and all the other stores you work on—via theStorestab in yourPartner Dashboard.You might also like:4 Quick Ways to Build Trust With a New Client.Removing managed storesOnce you’ve finished working with your client, the merchant can remove your account from their store. You can also remove your collaborator account by visiting theStorespage, clicking on the store in question, and clickingRemove managed store.Removing managed stores also helps you maintain security for the merchants you’ve worked with.Sign up for our Developer Digest newsletterStay up to date with the recent changes to Shopify APIs and other developer products with our quarterly Developer Digest.Sign upHow to respond to your client asking why you need access to their storeThe permissions you should request from a client depend greatly on the work you’ll be doing for them. For example, if you’re going to be designing a store, you don’t need access to the store’s finances. You could, however, need access to the following:NavigationThemesBlog Posts and PagesOrdersProductsA full list of possible permissions with their descriptions can be found in ourHelp Center.It can be helpful to take the time to explain to your clientswhyyou need access to certain parts of their store—it builds trust, and helps your client understand the different aspects of the work you’ll be doing for them. If you send them a request for access without letting them know it’s coming, this can cause confusion and delay the project.Here’s a short script template you can adapt to let your clients know you’ll be requesting access to their store via a Shopify collaborator account:Hi [client name],Hope you’re well. We’ve reached [current stage of your client project]. To move forward, I will be requesting access to your store, [name of your client’s store], via a Shopify Partner collaborator account.A collaborator account allows me to only access parts of your store you want me to see, and it doesn’t count toward your store’s staff account limit. Based on the nature of our work together, will need [areas of your client’s store you need access to] access permissions.I will request access and you will receive an email from Shopify shortly notifying you.Please accept my request so that I can make the following updates: [list of changes you have discussed with your client].If you have any questions, please let me know. You can also check outthis Shopify Help Docfor more information about collaborator accounts. Thanks, and have a great day.Kind regards,[Your name]A Shopify collaborator account establishes a smooth working experienceA Shopify collaborator account establishes a collaborative environment that gives you an opportunity to do great work for merchants everywhere. They allow you to easily access the parts of a merchant store you need to do your job, while ensuring that the merchant experience is safe and controlled. Collaborator accounts make the process of working for existing Shopify merchants much smoother, and builds your reputation as a trusted Shopify Partner.Build apps for Shopify merchantsWhether you want to build apps for the Shopify App Store, offer custom app development services, or are looking for ways to grow your user base, the Shopify Partner Program will set you up for success. Join for free and access educational resources, developer preview environments, and recurring revenue share opportunities.Sign up"
3,"Nested navigations are a popular solution for effectively organizing collections, products, and pages. A Shopify link list is a simple collection of links, and these items can be created to point to a collection, page, or product within Shopify, or to a URL outside of the store’s domain.Link lists are used for a variety of different use cases. In this tutorial, we will cover how to use link lists in a Shopify theme to create a nested navigation using an unordered list. By using link lists and Liquid, we'll have full control over the menu from within the admin, giving flexibility to the merchant running the store.Grow your business with the Shopify Partner ProgramWhether you offer marketing, customization, or web design and development services, the Shopify Partner Program will set you up for success. Join for free and access revenue share opportunities, tools to grow your business, and a passionate commerce community.Sign upCreate a development storeBefore we start let’s set up a development store that we can work with. That way we can test, break, and fix things as we build, and once we’re happy with our code we can move it into production.Creating a nested navigationIn 2017, Shopify added the ability to create a nested navigation menu, up to three levels deep from a single page, by using a new menu editing interface. Previously, menus were created using multiple menus, and the handle for each menu to tie it to its parent menu link.At the time of writing this article, all newly created stores have the new nested menus user interface, where you can easily drag, drop, and nest menu items, meaning you no longer have to link handles to menu names.While it's common to include the navigation in a layout file, the default one beingtheme.liquid, you can test out the nested navigation concept in any template.Creating navigation menusWe'll begin by creating a new menu, our parent menu, by heading to theNavigation tabin the Shopify Admin, which resides under theOnline Storelinkin the sidebar.All new stores have a predefined default menu called ""Main Menu"". To add items to the list, simply click theadd another linkbutton, and give your new item a ""link name"" and a destination. Theselect drop downwill allow you to easily link to internal sections, such as a particular product or collection. Alternatively, you can enter your own URL (either internal or external) by choosing ""web address"" from the options.Once we have this in place, we can start to consider the Liquid code we’ll need to output this in our theme.You can drag and drop nested menu items to create a multi-level navigation, and with some JavaScript and CSS easily style it into a “super-menu” or “drop-down menu”.Outputting the menuIn order to output the menu in a theme file, we'll need to know the handle of the menu. Handles are unique identifiers within Shopify for products, collections, link lists, and pages.Let's begin by outputting all the items from theMain Menulink list. We can use a simpleforloop we've used many times before to output the link list items in turn:The key thing to pay attention to here, is the for-loop that’s been included around each<li>.{% forlinkinlinklists.main-menu.links %}We are using the variablelinkto hold the data relating to each item in the link list, as we loop over all the items. This keywordlinkcould be anything, it’s just a variable for the for-loop to output data for the menu. In order to accesslinkdata, we need to access all thelinksin the link list with a handle ofmain-menu, hencelinklists.main-menu.links.Remember, the defaultMain Menuthat exists in a Shopify store has the handle ofmain-menu, which is why it’s being used above. If our menu had a handle ofsocial-media, the syntax would be refactored as:{% for link in linklists.social-media.links %}Each link item has properties which include:urltitleIn the example above,{{ link.url }}will output the url we entered or generated in the Shopify Admin, and{{ link.title }}will output the link text specific to that url.You might also like:How to Manipulate Images with the img_url Filter.Multi-level navigationNow that we have the basic Liquid structure in place for a single level menu, we need to consider how to create a sub-menu for our top level items. Firstly, we need to head back to the Shopify Admin and create our first sub-menu.It might not be 100 percent clear initially, but every link in a link list, in addition to the menu itself, has a unique handle that we have access to in Liquid.Let's have a look at an example. If ourmain-menuhas three levels of links as follows:HomeAbout UsWomenAccessoriesEarringsScarvesWhat’s great about using nested menus in Shopify is that nested menu items can be obtained directly from their parent link using Liquid. This greatly simplifies the markup required to render a nested menu — meaning you don’t need to know the handle of the parent to render its children.Here's an example of how we can use these related handles to output a three level deep nested menu:You'll notice that we’re now introducing anifstatement in our refactored example, directly after we output the first level of our main menu:{% if link.links != blank %}Thisifstatement checks to see if a child-link for the current link item in our loop exists. If it does exist, the template moves forward and loops over all the items in the sub menu.Additionally, in this example we handlechild_linksub-menu and agrandchild_linksub-menu the same way, by checking with anifstatement to see if there’s a child-link for the current link item, and if it does exist, the template loops through and outputs the sub-menu.In the example above,child_linkis just aforloop variable we use to represent the current item in the loop; it could easily be replaced withsub_link, andgrandchild_linkwithsub_sub_link. We’ve usedchildandgrandchildin this case to illustrate the hierarchy of the nested navigation a bit more clearly.Final touchesI think it’s important to mention one extra link property that will be very useful when creating menus —link.activeandlink.child_active. These are both boolean properties (true/false) that allow you to easily tell if the current page is active, as well as if it’s nested items are active. The syntax is as follows:{% if link.active %} class=""active {% if link.child_active %}child-active{% endif %}""{% endif %}In this example, we'll add a CSS class ofactiveif the current page URL is the same as the list item, and a class ofactive-childif the current page is also part of the active nested item. Here's the full code example for completeness:Start nesting those menus!Link lists are a very powerful element of the Shopify platform. Having the ability to create an array of list items that can be changed in the admin gives you lots of flexibility. We've seen theme developers use them far beyond menu structures. However, knowing how to create nested navigation that can then be styled with CSS is a great tool to have at your disposal.Grow your business with the Shopify Partner ProgramWhether you offer marketing, customization, or web design and development services, the Shopify Partner Program will set you up for success. Join for free and access revenue share opportunities, tools to grow your business, and a passionate commerce community.Sign up"
4,"Today at Shopify Unite, we announced one of our biggest updates to date: Online Store 2.0.Online Store 2.0 opens up massive opportunities for developers building themes and apps for Shopify merchants. We’ve rebuilt the online store experience from the ground up, and are introducing a new set of developer tools to help you create amazing experiences for merchants and shoppers.In this article, we’ll take a look at these new tools and features to understand how they impact your work, and the possibilities they present. We’ll also explainthe requirementsto update your themes and apps to Online Store 2.0 standards.Let’s jump in.Table of contentsUpgraded theme architectureFlexible store contentEnhancements to the theme editorNew developer toolsA new reference themeThe Shopify Theme Store reopeningUpdating your themes and apps1. Upgraded theme architectureWe’ve upgraded the theme architecture for the online store, providing easier and more flexible customization options for merchants. There are also new opportunities for developers to build themes and integrations that can be easily customized by the merchant to fit their needs.Sections on every pageUp until now, merchants have been limited in how they represent their businesses on Shopify, with the flexibility of sections being limited to only the home page. Code edits, elaborate workarounds with blocks, or custom apps were needed to achieve a similar effect across other pages.That all changes with sections on every page. Now, merchants can add sections to all pages, not just the home page, unlocking a range of new opportunities to personalize every aspect of a store.How sections on every page worksThese changes are achieved by a new approach to how the storefront renders templates. Each page type can now be rendered using a JSON template file, which lists the sections of that page, and stores settings data related to any additional section that is added or edited by a merchant. Stores can have multiple template files that map to different products, collection pages, custom pages, blog posts, and more, allowing merchants to easily have different product, collection, and other pages in the same store.Within the new JSON template files, you can define which sections should appear by default when your theme is first installed, and which order they should appear in. Once the JSON template is added, a merchant can navigate to the theme editor, and add any section that contains presets—exactly how you would add dynamic sections to the home page previously.To see a model of how this could be set up, take a look at the/templatesdirectory of our new theme,Dawn, inthe GitHub repo, or read ourdeveloper documentation on JSON templates.See below for a demo of templates.Theme app extensions with app blocksWith the updated theme architecture comes an update to how apps integrate with the storefront. Currently, there’s no structured, end-to-end solution for apps to easily integrate with themes. Developers are left to build integration logic for every existing theme and host assets themselves, making it hard to build features that work consistently across all themes and are fast anywhere in the world.To solve these challenges, we’re introducingtheme app extensions for developers, allowing you to extend apps into merchants’ themes via app blocks.An app block being added to a product page in theupdated theme editor.Built-in modularityApp blocks represent a radical change in the way apps are included inside of themes. App developers can now build UI components that can be added, removed, and configured directly through the theme editor without having to touch a theme’s code. This means uninstalls are also cleaner, with ghost code automatically removed.Theme app extensions can be easily created, published, and updated (with versioning) from the Shopify CLI, just like other app extensions.This modularity means you no longer need to build integration logic for every existing theme. And since it’s no longer necessary to open up the theme code to manually install your app, you won’t have to worry about breaking changes being introduced. That means less time troubleshooting with users.To identify if a merchant is using a theme that is compatible with your theme app extensions, you should use theTheme APIandAssets API. Knowing which type of theme a merchant is using will help you offer the best onboarding experience for merchants to integrate the app into their theme.Host and manage assetsYou’ll also be able to add your app’s supporting assets to your theme app extensions for fast hosting via Shopify’s CDN, and easily reference those assets from within your theme extension’s app blocks.An example of an app block included in a theme app extension.To build your first theme app extensions and make your apps compatible with Online Store 2.0, visit themigration information in our documentation.2. Flexible store contentWith Online Store 2.0, developers don't have to hardcode metafields into themes or rely on APIs to make changes to product pages. Theme developers can now use dynamic sources to insert standard metafields and known resource properties as setting defaults.Improvements to metafieldsTheupdated theme editorwill allow merchants to addmetafieldsand properties without the use of APIs or code. That means merchants will be able to add exactly the content they need to the product page, like introducing a space for buyers to include a size chart or ingredient list. Anything that is unlikely to appear in the core store editor can now be added in via metafields.On the development side, we’ve revamped metafields in three key ways:More flexible:Metafields now have a much more flexible type system that will grow over time to become more tailored to commerce data.Standard metafields:We’re introducing standard metafields, which make it much simpler for custom themes to work out of the box on stores across different market verticals.Presentation hints:You will now be able to add presentation hints to metafields, allowing Storefront API and Liquid users to render merchant data in the way the merchant intended, with far less custom code.Learn more about metafieldsin our documentation, and watch a demo below.File pickerMetafields now support media such as images or PDF files. Rather than hard coding an asset into a theme, the metafield file picker makes it easy to upload and select media on product pages. All your images saved in theSettings/Filessection are immediately available for use.For example, if merchants would like to have a product warranty or sizing chart available for download on a product page, the file picker makes it easy to select that file with a simple UX, and insert it where the file metafield is placed on their theme.Files APIDevelopers will also gain access to the contents ofSettings/Filesthrough the new Files API. This GraphQL API enables apps to upload or select existing media content fromSettings/Files. Apps can now benefit from access to this area of the admin, including populating media metafields with content.This opens up opportunities for apps to use this space for files and images that aren't directly associated with a product, including images used in themes. Learn more about the Files APIin our documentation.3. Enhancements to the theme editorTo empower merchants to take advantage of these improvements and updates—and to make it easier for developers to navigate—we’ve also made substantial enhancements to the theme editor.Instead of needing to drill down into different sections, the editor now displays a tree view of all the content on a page in the sidebar. From this sidebar, merchants can hide most blocks, with the exception of the header and the footer (which can contain blocks that can be moved or hidden, but can’t be hidden themselves). These changes let merchants easily update the hierarchy of a page.The updated theme editor in action.Liquid input settingAn additional update to the theme editor is the new Liquid input setting that will allow merchants to add custom Liquid code to pages directly from the editor. The Liquid setting is similar to the HTML setting type, except that it will allow access to Liquid variables, meaning merchants will be able to access global- and template-specific Liquid objects.This setting will reduce the need for merchants to manually change the code of a theme, particularly when adding code for apps that use Liquid. Developers can learn how to add this setting to a section or blockin our developer documentation, or viewour new themeDawn’scustom-liquidsectionfor an example of how this can be implemented.These changes make it easier for merchants to work with the new features of Online Store 2.0, and make decisions about their online store without engaging with a developer—freeing up your time to focus on building creative integrations and solutions.4. New developer toolsOnline Store 2.0 introduces a whole new way for developers to build apps and themes for Shopify merchants. To support this change, we’re introducing a suite ofnew developer toolsthat seamlessly integrate into Shopify and assist the process of developing, testing, and deploying your themes.With the introduction of the Shopify GitHub integration, an updated Shopify CLI tool, and Theme Check, you’ll experience more robust theme development with version control, a better sandboxed environment to develop themes locally, and streamlined development with a real-time linter tuned for Shopify themes.Below, we look at what each of these tools means for you.Shopify Github integrationWe’re launching a new integration with GitHub to make theme development and maintenance easier to track and manage. By connecting your GitHub user account or organization to an online store, changes are both pushed and pulled to a Github repo that is always in-sync with the current state of selected themes.The GitHub integration with themes will allow developers to collaborate safely when editing themes by introducing native support for version control. When working on a merchant’s store, developers can now implement workflows where changes to themes must be reviewed and merged on GitHub before populating to a live theme.For those of you that use CI to perform linting, testing, and file transformations before deploying to an online store, such as running Theme Check or compiling SCSS into CSS, the Github integration can be used in combination with Git subtrees to sync the production-ready files. See more on thisin our documentation, and watch a demo of the GitHub integration below.Shopify CLIWe’ve also made some significant changes to the existingShopify CLI tool. App developers have been using the CLI to quickly generate Node.js and Ruby on Rails apps and app extensions, but we’ve now widened the scope of the tool to include themes.The Shopify CLI accelerates your theme development because it can now:Safely develop, preview, and test changes to themes inside of development themesHot-reload CSS and Liquid section changes as you’re developing thanks to the new dev serverInitialize a new theme project using our new theme,Dawn, as a starting pointPush and publish themes from the command lineRunTheme Checkon your themePopulate test data for your theme, including products, customers, and draft ordersDevelopment themesDevelopment themes are temporary, hidden themes that are connected to the Shopify store you’re using for development. When you callshopify theme serve, the Shopify CLI automatically creates a development theme inside the store you’re working on, and will reuse that theme each timeshopify theme serveis subsequently run. You don’t need to worry about others viewing or making edits to it because development themes are not visible on theadmin/themespage.Development themes don’t count towards your theme limit, and are deleted from the store after seven days of inactivity. They are also destroyed when you runshopify-logout, so if you need a preview link that won’t be destroyed when you log out, you should push your theme to the store instead.Development themes can be used to view changes to a theme that you’re developing locally in real time, and interact with and customize the theme using the theme editor.These tools are designed to make your development process easier, and get you up and running with Online Store 2.0 quickly.Theme CheckTheme Check is a language server for Liquid and JSON that scans themes for errors and highlights Shopify theme and Liquid best practices. This tool can integrate with text editors such as Visual Studio Code, and identifies several types of issues within your theme code, including Liquid syntax errors, missing templates, performance issues, and more.To help you to debug theme issues quickly, error messages include a link to the failed check's documentation. Theme Check is also bundled with the Shopify CLI tool, so you don't need to install it separately.Check out our developer documentationto learn how to install and use Theme Check when testing your themes.See below for a video of the new code editor in action.5. A new reference themeTo accompany the launch of Online Store 2.0, we’re all launching a brand new default theme that ties together all the features described above. We call it Dawn.Dawn is Shopify’s first source-available reference theme with OS 2.0 flexibility and a focus on speed. It is built with semantic markup with HTML and CSS, instead of leaning on polyfills and external libraries, to create great experiences on all browsers. It’s designed to maximize flexibility while minimizing complexity, which means balancing being opinionated with our design with allowing merchants the space to make changes that they deemed fit for their business.We kept our emphasis on speed as we built Dawn, and the result is that Dawn is fast by default, no matter what—it loads 35 percent faster than Debut, the theme that more than half of merchants use today.Dawn, Shopify's first source-available reference theme.Since Dawn already has JSON templates for all of its pages, you can use it as a model when unlocking sections on your own themes. It will eventually be the new default theme for all new stores, replacing Debut.Learn more about how we built Dawn by reading our articleon the Shopify UX Blog.On using minimal JavaScriptArguably the biggest pursuit with Dawn is that we explored how far can you really get with aJavaScript-only-as-needed approach to development. This is because we are prioritizing speed more than ever, providing a fast foundation to increase the likelihood that merchant stores load quickly.We knew that building with minimal JavaScript meant we would not compromise on the user experience for merchants and buyers. In some cases, JavaScript is necessary even if it’s not the most performant choice. But where it made sense, we leaned on native browser features instead of JavaScript libraries and polyfills.We’re encouraging developers to take advantage of native browser functionality where possible to render HTML and CSS layouts.6. The Shopify Theme Store reopeningWe’re excited to announce that in addition to the improvements of Online Store 2.0, we will also be reopening theShopify Theme Storeto partners on July 15, 2021. On that day, you will be able to submit your new themes for review, and approved themes will begin being published.Even better is that in September, we will be removing all revenue share on the first million dollars you make annually on the Shopify Theme Store. That means that if you make less than $1 million USD, you will pay zero percent revenue share—and those numbers reset every year. When you make more than $1 million USD, you’ll still only pay a 15 percent revenue share on the incremental earnings.There will be a one-time submission fee of $99 USD per account to submit to the Shopify Theme Store, plus a 2.9 percent processing fee on all transactions. We’ll have more info on this update soon.With millions of merchants using Shopify to run their businesses, now is the time to build themes for these global entrepreneurs. The Shopify Theme Store has been closed since 2018, so this is an opportunity to get in early and establish yourself as a trusted theme developer.Learn more about the updated guidelinesfor submitting your theme to the Shopify Theme Store. If you haven’t already, sign up below for a Shopify Partner account, and start building your first theme.Grow your business with the Shopify Partner ProgramWhether you offer web design and development services or want to build apps for the Shopify App Store, the Shopify Partner Program will set you up for success. Join for free and access revenue share opportunities, developer preview environments, and educational resources.Sign up7. Updating your themes and appsTo take full advantage of these improvements, you should plan to migrate your themes and apps to the updated requirements of Online Store 2.0 as soon as possible—especially as merchants come to expect the flexibility OS 2.0 provides.By the end of the year, it will be required that all themes in the Shopify Theme Store and apps in the Shopify App Store use the new infrastructure. Merchants’ existing themes will continue to work beyond this year, but to access new Online Store 2.0 features through the theme editor, merchants will need to make sure their theme is Online Store 2.0 compatible.Learn more aboutmigrating your themes to OS 2.0andbuilding theme app extensionsto make your apps compatible with OS 2.0 themes.Updated documentationTo help support you in updating your themes and apps, we’ve overhauled the developer documentation for the online store. Our documentation now includes:How-tos for developer workflows and processes with themesBest practices for commerce components with semantic web best practicesHow apps should integrate with the new online store architecture, including how to make your app work with legacy themesVisitour new documentationto learn more about updating your apps and themes. Stay in the loop with updates on all things development at Shopify by joining our monthly What’s New for Developers newsletter.Stay in the knowSubscribe to receive What's New with Shopify, our monthly email featuring Shopify's latest product news.EmailSign me upThanks for signing up!Building for the future of commerceOnline Store 2.0 marks an end-to-end overhaul of how themes are built at Shopify. With sections on every page, app-powered blocks, flexible data storage, and robust developer tools, the process of building a theme on Shopify is easier than ever before. The extensibility offered to app developers means more opportunity to build integrations for merchants and surface your solution directly in the online store.Update your themesandcreate theme app extensions for your appsto take full advantage of these updates, to continue building for merchants around the world.Learn more at:Shopify Partners"
5,"We know that our Shopify App Developer community has several JavaScript fans, and we’re big fans of some of its frameworks too,like React.As the JavaScript community continues to build and innovate, it feels like anything dot JS exists.Among the many new frameworks however, Vue.JS has been among the most buzzworthy in the community.In fact, not only is it a wildly popular open source project, it’s also the second most popular JavaScript framework on GitHub.To help you level-up your skill set and understand what this framework is all about, we recently partnered with Cassidy Williams, Senior Software Engineer at L4 Digital, to show you the ins and outs of Vue.js and how it can be used to rapidly build front end experiences for web apps.Before we dive into a re-cap of Cassidy’s steps for getting started with Vue.js, here’s a little background on why it was created, and how it differs from other popular frameworks, like Angular and React.Origin of the Vue.js frameworkLaunched publicly on GitHub in February 2014, Vue.js was brought to life by a former Google developer, Evan You. He had long been attracted to JavaScript since it enabled a straightforward way to build something and share it instantly. After being recruited by Google, a lot of his time was spent on in-browser prototyping. His team worked to build things that were quick to set-up, but still tangible. For this purpose, a framework they sometimes used wasAngular.While Angular helped speed things up, offering data binding to deal with the DOM without having to touch it directly, there were still extra concepts that demanded code be structured a certain way. In an effort to further simplify the coding process and help developers move faster, Evan worked to build something that had these efficiencies, but was even more lightweight.You might also like:The Essential List of Resources for Shopify App Development.Getting started with Vue.jsVue.js was designed to be approachable, so that anyone with a basic knowledge of HTML, JavaScript, and CSS could easily get started with this framework. There are also many greatbeginner templatesyou can get started with.After choosing which API you want to build on top of, visit theVue.js repository, open your consoles, and get coding! You’ll begin by installing the NPM globally, then loading the CLI:npm i -g vue-cliThen, initialize Vue to start a new project, and choose a starter project. In this demowebpackwas used.vue init webpackOnce the project is initialized, you’ll fill-in all the details, such as name, project description, and author. You can also choose the Vue build. In Cassidy’s tutorial, the default build was used.You’ll also install the router and specifying if you want to run tests — we opted forno.Initial setup after installing the webpack template.After these basics have been specified, you’ll usenpm installto install all the libraries Vue specifies you’ll need. Once that’s complete, you’ll usenpm run devto start the dev server. Voila — you now have a basic web app UI!Live Vue.js Web App UI, created with webpack template.Now that we have a live app, it’s time to get under the hood and customize it.You might also like:[Free Webinar] How to Build Your First Shopify App.Customizing the app UIAs with most web apps, there’s an index.html. Among all this code, the entire app lives within the one little line<div id=""app"">/div>. In fact, if you wanted to make a standalone vue app that lived within a larger web app, you could do so within this app div.Index.html of the app, within the text editor.If you also want to take a peek at all the libraries Vue gives you, you can do that inpackage.json.Package.json of the app, within the text editor.Now ontomain.jsaka the main JavaScript. Here it imports Vue, the app, and the router. Also specified is that the router uses the app templates and pulls in the app components. This is what makes up the backbone of your app.Main.js of the app, within the text editor.Now in the app component —app.vue— you can view the structure and style. Note thatapp.vueis a Vue.js file, and a Vue file always contains:A templateA scriptA styleIn Vue, the given style defaults to being applied globally, but if you want it to become specific to the component itself, you’ll addscopedwith<style>.In theHelloWorld.vuecomponent, you can make changes here that will appear in the app’s user interface. To change the h1 component, for example, you would update themsg.Updating the h1 of the Vue app.Now that you have the basics set-up, you can make the app more robust by adding a new route.Using the router to make a new routeIn the router, you’ll add a new component inindex.js. Following Cassidy’s tutorial, you can make your app bilingual and create a spanish version of the Hello World component, which we’ve suitably named the Hola Mundo component. The set-up for this would be similar to the HelloWorld coding that came within the webpack, except that you would specify a unique path, name, and component name:After establishing this new component, you can copy and paste the existing code fromHelloWorldand update:<div class='hola'>name: HolaMundomsg: 'Bienveindos a Vue!'Then, make sure to import this new component into the router:import Holamundo from '@/component/HolaMundo'After this is initialized, a new page in your web app will be created.New page/route created within the Vue.js app.Now that you have the two pages, you probably want them to link to each other. Unlike with a React router, where you have to add a link component, in vue you can use a simpleacomponent.In the HolaMundo component you’ll add:And in the HelloWorld component you’ll add:When you refresh the app, both pages will link to each other! Since we now have the basics setup, let’s move onto building a more complex component.Adding a functional component for countingTo show you how simple it can be to set-up an interactive component, Cassidy walked us through how to build an interactive counter with a button that added a count upon being clicked. Some of the same steps from above apply, but this time you’ll be making a button appear on the UI, programming a response to an action, and making sure that action is properly displayed within the app.First, you can make the button. In the HelloWorld component, add:<button></button>Now add a new data attribute,count: 0to make the counter start at zero. Now go back to your button and add the desired response to being clicked, as well as a directive:<button v-on:click=”count++”>Increase the count!</button>To display the counter in the app’s UI, you’ll add:<div>[{count}]</div>Just like that, your app has a counter!Add user search functionThe sample app Cassidy created for this tutorial is based around searching for different GitHub users. Now that you know the basics of setting up a view app and adding components, you have a good base for building this user search functionality.First, create a new component::e “src/components/GitHub.vue”After you save it, it will appear under components, along with HelloWorld and HolaMundo. Like before, copy and paste the code from an existing component, and update the component name and message.Now that the component is established, the first thing to do is create a form with an input element:Then, you’ll import this to the router to make it visible on the app UI. Now that it’s visible, it needs to be made functional. Since you want to create a search form, you’ll need to make a query function.In Vue, when you want to have certain methods attached to a function you simply addmethods:.In this instance, the method will be:Now that data can be retrieved, it’ll need to be used and parsed. In the data, have a results object and have it start at null:results: nullTo print the results on the UI, and organize by name, user bio, and location, you’ll write the following lines:Let’s get even fancier. To show the image associated with the search results:<img v-bind: src=”results.avatar_url”/>Last but not least, you can remove the Vue logo that was given to you with the webpack template, by finding it in the App.vue file, and deleting it. It’s also within this file that you can add image margins and sizing to format the image that displays with your GitHub search results.And there you go — a web app for searching GitHub, made in under thirty minutes!Screenshot of final app made by Cassidy Williams, in her webinar.From opening your console to Hello World, in a flash!When it comes to Vue.JS, simplicity and speed are the name of the game.As our recent guest webinar host Cassidy Williams demonstrated, even if it’s not your go-to framework, Vue.JS is great for the prototyping process, and when you need to quickly create a live and functioning web app front end on top of your backend.Found this webinar helpful?Sign upto be notified when new webinars are announced, and continue to one-up your design and app building skills."
6,"Building for the unknown can be tricky, and clients or merchants always want some level of control when it comes to their websites. You might be building a custom theme for a client, or building a theme to be distributed on theShopify Theme Store; in both cases there are a lot of things a merchant will want to customize and be able to change.So how do we make our themes dynamic for clients?That’s when theme options are your best friend. They allow you to configure theme settings, which merchants can access using theTheme Editor.In this article, I’ll explain how to create dynamic color schemes using thesettings_schema.jsonfile. More specifically, I’ll cover how to change color schemes based on theme settings, and how you can create preset options with thesettings_data.jsonfile and allow clients to choose a curated preset option that you define, so they can choose their idealecommerce color palette.Tip:If you haven’t used theme options before, you will want to readthis introduction to theme options.You might also like:3 Simple Steps for Setting Up a Local Shopify Theme Development Environment.What are theme options?Like I mentioned above, theme options allow a merchant to customize the look and feel of their website. It’s important to note that the theme options that are available to a merchant, are predetermined by the theme developer who builds the theme.Then, using theme options, Liquid objects in your CSS or Sass, and rules in your Liquid templates, you can build dynamic themes that allow merchants to customize the look and feel of their online store, while still maintaining some control. You can view a theme’s options by going to theOnline Storetab, selectingCustomize theme, and going to theGeneral settingstab.Creating dynamic color schemesCreating dynamic color schemes might be less important when building a custom theme for a single client (where the theme matches designs already discussed), but what if you plan on creating a theme that might be used by many different merchants? A custom color scheme is something that a merchant will want and expect to customize with their new store.To customize and control the theme options found in theShopify Theme Editor, you’ll need to dig into thesettings_schema.jsonfile.settings_schema.jsonis located in theconfig/directory of your theme.1. Setting up thesettings_schema.jsonfile for your themeFirst we want to define a few properties about our theme itself. Add the following code to yoursettings_scheme.jsonfile:This sets up some theme information and links for custom themes through the Theme Editor panel, behind the...button.Namemust be set totheme_infofor this section to create the appropriate mappings for your theme options.Theme_namerefers to the readable name that appears in the popup.Theme_authorshould be the author of the theme, often the freelancer or agency creating the theme.Theme_versionrefers to the version of the theme; this is necessary if you plan on distributing your theme, and will most likely make updates in the future.Theme_documentation_urlreferences the help URL or documentation for your theme, and displays as theDocumentationlink for your theme.Theme_supportis the url to contact a support team for your theme, and displays as theSupportlink. Make sure to escape/characters using a\in urls.2. Adding a theme options sectionTo get started, we’ll need to define a section for our color settings. This goes directly after ourtheme_infosection. Make sure to separate the two sections using a,and place the following code before the parent closing]bracket:Here,namerefers to the readable title for the section we’re creating.Settingssets up where we’ll place the rest of our theme options for this section. You should see the following added to the Theme Editor once you save and refresh:3. Adding a theme options headings and settings for colorsOnce we’ve added our section forTheme Colors, we can now create a subsection using the option of typeheader, with thecontentset to the title of that subsection, followed by theme options for various colors. The following theme options should be added inside thesettingssquare brackets:Each theme option is found within an open{and a closing}. I’ve created several examples in the code above. When building out a color theme option, it requires three mandatory properties.Type,which defines which property to be rendered; in the example above we have aheadertype and severalcolortypes.ID, which is referenced in your theme templates, CSS, or Sass files, and generates the output/value.Label, which creates a title in the theme options to clearly describe the settings’ function.Defaultcreates a default value for the color theme option. It’s not mandatory, however without it, the color value is blank. This can be problematic if you’re using theme options in your CSS or Sass as a property value, which we’ll be doing next. If no default is set, certain declarations won’t render properly because the output of the settings object will render as empty or blank. Therefore it’s important to also specify adefaultcolor value for each of our theme options.The finalsettings_schema.jsonfile should look something like this:4. Using theme settings in CSS or SCSSNow that we’ve created a bunch of theme options, we can use them in our CSS. Because Shopify renders.liquidfiles on our servers, you can simply append the.liquidextension to your CSS or SCSS files, and our servers will compile the Liquid found in them first, then compile the next prefixed extension (if that’s SCSS) to CSS. With the.liquidextension you’ll have automatic access to the theme’ssettingsobject within a CSS or SCSS file.CSSCreate atheme.css.liquidfile in your assets folder. Once created, make sure to add it into the<head>element of yourtheme.liquidtemplate using the following:{{ 'theme.css' | asset_url | stylesheet_tag }}Wheretheme.cssis the name of your stylesheet,| asset_urlreturns the URL of the file in the assets folder, and the| stylesheet_taggenerates a link element with the source as the full URL of yourtheme.cssfrom that directory.<link href""=//cdn.shopify.com/s/files/1/0087/0462/t/394/assets/theme.css?28178"" rel=""stylesheet"" type=""text/css"" media=""all"">Within your CSS file, you can access any of the theme options colors by simply accessing the property in thesettingsobject inside{{and}}. For example:h1, h2, h3, h4, h5, h6 {
  color: {{ settings.color_heading }};
}In the example above,color_headingis theIDwe specified insettings_schema.json. It only changes our heading color if we set up our CSS to reference the theme option.SCSSCreate atheme.scss.liquidfile in your assets folder. Once created, make sure to add it into the<head>element of yourtheme.liquidtemplate using the following:{{ 'theme.scss.css' | asset_url | stylesheet_tag }}Wheretheme.scss.cssis the name of your stylesheet compiled to CSS,| asset_urlreturns the URL of the file in the assets folder, and the| stylesheet_tagagain, generates a link element with the source as the full URL of yourtheme.cssfrom that directory.<link href""=//cdn.shopify.com/s/files/1/0087/0462/t/394/assets/theme.scss.css?28178"" rel=""stylesheet"" type=""text/css"" media=""all"">Within your SCSS file, you can access any of the theme settings colors by simply accessing thesettingsobject the same way you would within a CSS file. The bonus, however, is with SCSS you can use these theme options strategically with variables.$color-link: {{ settings.color_link }};

a {
  color: $color-link;
  text-decoration: none;

  &:hover,
  &:focus {
    color: darken($color-link, 20%);
    text-decoration: underline;
  }
}In the example above,color_linkis theIDwe specified insettings_schema.json. We’ve assigned it to a variable called$color-linkand then used that variable in our SCSS file. Using native SCSS functions likedarken()orlighten()we can create dynamic color schemes based off only a few main colors.Being strategic with color variablesIf you’re building a theme to be used by the masses, it’s important to think about how specific colors might be linked or play off of one another. For example you could have a spot color used for both links and buttons across the site, and everything else might be quite neutral in your initial design. You have the creative control to limit and to extend what can be changed easily by a merchant, and that may be as simple as limiting color theme options to a single spot color, and then using variations of that color through Sass functions and mixins. In some cases a single spot color with neutral backgrounds could save a merchant time, instead of having to make many choices and giving too much control.Alternatively, that might limit who will want to purchase your theme, because a merchant might want “all the things!” In the end it comes down to intent; what do you want a merchant to be able to customize, and which design elements do you believe you need to control.You might also like:Developing Shopify Themes with Accessibility in Mind.Presets andschema_data.jsonSo now that we know how use the{{settings}}object in our CSS and SCSS files, how can we specify certain presets or color schemes for our clients?For example, you might want to create both a light and dark version of your theme. The light version might be thedefaultvalues set in thesettings_schema.jsonfile. However, if a merchant changes any of these values there is no way for them to “go back” to the original default settings, unless we create a “preset”.A merchant can find presets by going toCustomize theme, clicking on theGeneral settingstab, and clicking on theChange theme stylebutton. TheChange theme stylebutton won’t appear if the theme doesn’t have any presets built in.Creating presets is quite simple. Inside theconfigdirectory of your theme there is a file calledschema_data.json. If you haven’t created it, it will automatically be generated by Shopify for you once you upload your theme. Inschema_data.jsonyou will find the current values for all theme options, specified in your theme for the store it’s enabled on. Mine looks something like this:You can see that the”current”object’s properties consist of theme optionIDmapped to a set value; if nothing has been altered through theCustomize Themeeditor then these values should match the defaults specified in yoursettings_schema.jsonfile. Section theme settings follow the theme options in another object called”sections”.Creating custom presetsTo create a custom preset, you simply need to copy the existing“current”object and all it’s properties, then paste it into a”presets”object, just below“current”. Make sure to separate the two with a comma, and give your new preset a name. In the example below, the name of my preset is“Default”. To create more than one preset, you simply need to duplicate the“Default”object inside”presets”, and give it a new name.Possibilities are endlessNow that you know how easy it is to use theme options inside your CSS and SCSS files, as well as create custom presets for merchants, the possibilities are limitless!Theme options allow you to expose so many easy-to-customize settings for merchants, which enables merchants to feel a sense of ownership over their online store. Using presets allows you to create many different variations of a single theme, which can be a way of creating a lot of options for a merchant with a little curation built in 😉.If you have the imagination and time, you can create some pretty amazing things.How have you used theme options to create dynamic themes? Tell us in the comments below!"
7,"You can easily add ecommerce functionality to any WordPress theme you’re building, using Shopify and the new BuyButton.js library — all without additional plugins.This is a great solution for customizing the way products appear on your client’s website, while giving you the flexibility to build custom ecommerce interfaces through shortcodes, widgets, or custom post types.To integrate the BuyButton.jscall to action buttoninto a WordPress theme, you’ll need a basic familiarity withJavaScriptandPHP. Let’s get started.You might also like:How to Use JavaScript to Add Ecommerce to Any Website.1. Setting Up BuyButton.jsTo use the BuyButton.js library, install the freeBuy Button appon your Shopify store, andcreate an API key. When setting up a Buy Button for your client, remember that they’ll need to be on a paid monthly plan to access this feature —Shopify Starter,the $5/month plan, is sufficient.Now you can include the Buy Button in your WordPress theme. You can either link to the CDN, or include the BuyButton.js file directly into your theme. Either way, you’ll want to add it usingwp_enqueue_script. At this point in your setup, make sure to add the BuyButton.js script as a dependent of the JavaScript file you’ll be initializing the library from (either a new file, or a/the file you keep custom JavaScript in).For more tools, check out our list ofSublime text plugins.2. Initialize BuyButton.jsLet's write a script to search the DOM for any nodes with the data-attributeshopify-product-id, in order to add a product embed to each. This script can go in your main JavaScript file, as long as it’s loaded after BuyButton.jsStart by initializing BuyButton.js. You’ll need amyshopify.comdomain name, an API key, and an application ID to create your client and begin making requests. Check outour documentationif you’re unsure of where to find your API Key or application ID.Next, initialize the UI library to fetch data from Shopify and build widgets:Now that everything is initialized, query the DOM for nodes with the data attribute, and use a node’s ID to fetch the product’s info to generate and display an embed:Add a ProductTest that your setup works by creating a<div>in a post/page with the appropriatedata-attributeset to a product ID. To get the product ID of a single item, visitProductsin your Shopify Admin. From here, choose the product you wish to integrate with your Buy Button — to do this, simply inspect the page URL, and the product ID will be at the end.For example, if the URL you see ishttps://your-store.myshopify.com/admin/products/12345, the product ID is12345.To learnhow to find multiple product IDs, read our documentation.A product embed added to the WordPress twentyseventeen theme.Customize EmbedsTo customize a component, create anoptionsobject in the configuration object. Each component you wish to customize — for example,productorcart— will have its own configuration, nested within theoptionsobject.For example, to customize the product and cart in a product component, pass through bothcartandproductobjects:Because there are far too many customization options to list in one blog post, you can find an overview of everything you can change in thedocumentation.BuyButton.js renders components within iframes by default, this prevents unintentional style clashes and overrides. But, if you would like more control over the appearance of your embeds, you can remove the iframes, and style them with CSS.This renders entirely un-styled embeds. To start from the styled defaults, include the BuyButton CSS file, usingwp_enqueue_styles.Create a ShortcodeShortcodes are a convenient way for WordPress users to add custom content to a post or page, without having to write HTML; use them to your advantage by creating a shortcode to generate the required Buy Button<div>. This will allow your client to easily add a product embed, using a shortcode like[shopify_product id=”123”].This simple shortcode can be registered by adding the following to yourfunctions.php(or wherever you keep custom functions):If you don’t want your client to have to remember a shortcode, you cancreate a media buttonfor them to use instead.Create a visual product pickerWith a bit of JavaScript and theJS Buy SDK, a basic product picker can be added to the WordPress admin. To do this, you’ll need to include the JS Buy SDK in your admin scripts:Next you’ll need to initialize the JS Buy SDK client (the same way as the BuyButton.js client), and use itsfetchAllProductsmethod to pull a list of products from the shop. Then, display the products in a list, and add a click handler that sets the value of an input field to the selected product ID.You can then use this value to set the shortcode attribute, or use it anywhere else you need a product ID.Create other admin interfacesTo get your embed to show up on a post or page, a<div>with adata-shopify-productattribute and a product ID is all that’s required.How you get that<div>into the HTML of a page is up to you — there are a couple of methods you can use, depending on your client’s needs:Add acustom metaboxto posts that allows clients to enter a product ID. You can then output a<div>with this provided ID in a specific place on your post or page template.Create acustom post typefor product or collection pages.Create acustom widgetto allow clients to add a product or collection embed to any widgetized area in your theme.You might also like:How to Create a Sticky Add to Cart Button On Scroll.Endless possibilitiesRegardless of what you’re looking for, Shopify’s BuyButton.js offers a stable platform to build your client’s embeddable ecommerce solution on top of.If you’re looking for more information on the JS Buy SDK and BuyButton.js, refer toShopify’s robust documentation.Are you working on some neat Buy Button projects?Show us in the comments below."
8,"The JavaScript Buy SDK was announced at Unite — Shopify’sPartner and Developer Conference— to provide Shopify Partners with even more ways to host Shopify stores.It’s now easier to integrate the Shopify JavaScript Buy SDK into any website or CMS, meaning end users need minimal customization. This means products can be managed within the robust Shopify architecture, including checkout, returns, and shipping, while the look and feel is managed within the CMS.Shopify website integration is a useful way for agencies or freelancers to provide customers with more creative online shopping experiences, and opens up new opportunities to pitch the SDK to current or potential clients.Better yet, it means that smaller clients — those that previously would not have had the budget or thought it would be overly complicated — can now integrate Shopify into their website.The Shopify JavaScript Buy SDK can be used to:Provide products on a service-oriented websiteOffer a low-risk way to test a full-store ideaProvide a simple way of creating landing pagesCreate a microsite for a unique set of productsToday I’ll go through all four options in detail.You might also like:Design Your Store Faster With Product CSVs and Images1. Limited products as part of a websiteSome clients have a service-oriented website, and generally don’t put a lot of effort into selling products. However, they may be looking to earn some additional revenue, or increase brand awareness through promotional products.Perhaps it’s a charity that would like to sell some merchandise as a fundraiser. Or a service company with some tools it could promote. Or a restaurant with a line of in-house sauces, or a recipe book. Any of these examples would benefit from a Shopify integration within their existing website.Here’s a real-life example: The Stanley Thompson Society promotes some of the world’s best golf courses, created byStanley Thompson. It’s a rich website with a lot of information about the man, the exceptional golf courses he created, and the activities of the Society, including verifying Stanley Thompson golf courses and providing a scholarship for golf course design/maintenance..As part of the website, they also use Shopify integration to sell golf-related products through theStanley Thompson Store.2. Test a full store ideaThe benefits of reaching an expanded online audience, and providing an easy way for existing customers to shop from their home, can be a substantial win for clients already running a retail operation. But, taking the leap to e-commerce can also create a lot of anxiety and involve a considerable amount of time, money, and risk to get up and running.Testing the idea of an online store can be a good way of reducing that risk. A retailer can take a subset of products — ones they think will sell best online — and display them on a simple website, using the Shopify integration.If the client has a limited budget, more of it can be spent on marketing, in order to test the idea and get it off to a great start. If there’s good feedback, you’re on the right path. Continue adding products to set up the full store, while continuing to test customer appetite.On the other hand, if you test the market response and find that there’s not enough interest, your client will be glad you saved them significant time and money.A solid example of testing an idea online isKyfakand their first product — a hilarious party game called FINISHIT. To start selling the game, Kyfak wanted a simple website to introduce the company, and sell their boardgame and accessories online. The Shopify integration was just the thing they needed to get started. If the board game sells well online, Kyfak plans on expanding into other products.3. Enhance your landing page with productsLanding pages are a key component to a successfulinbound marketingcampaign. The landing page is a standalone web page that is distinct from your main website and has been designed for a single call to action. The navigation bar is hidden to restrict the options available to users visiting this page, helping to guide them toward an intended goal, such as subscribing to a newsletter or asking for an email in exchange for a discount coupon or download.A campaign may use social media, content marketing, email marketing, or paid search to drive a visitor to a landing page, in the hopes of converting them, giving better results than sending visitors to a generic page on the website.With the Shopify JavaScript Buy SDK iIntegration, you can maximize sales of a specific product or product line by leading visitors to a landing page that is focused on promoting the product or /product line. Instead of the usual call to action, you can have a bBuy bButton as the focus of the landing page, incentivizing visitors toward buying a product (and getting their email in the process).At my agency, Northern Village, we use our website’s landing page to sell a custom laptop pad that keeps a computer cool while sitting on a lap. We now have a link that we can use to promote the product on Twitter, Facebook, and various blogs. The Shopify integration made promotion effective, and the orders are rolling in.4. Create a microsite for a set of productsA retailer may have a set of products that are quite different from their main business. It could be a specialty item, or a set of products that is better suited for an online store. Creating a microsite for a product line is also a good way to reach a new online market. A small website with its own unique branding can easily be setup.It’s easy to create a small website, and add products to a new store.A great example isElf Cozy’s Workshop, a Canadian online store specializing in custom clothing and accessories for professional Santas, including puffy shirts, aprons, ball caps, etc. It was born out of Sharon’s Cozy Horse Creations, but because Santa clothing doesn’t have anything to do with horse accessories, Sharon decided to set up a one page website to test demand for a full website. Within only a few weeks of launch, the website was receiving orders from as far away as Hawaii.You might also like:How to Use Web Fonts in Your Shopify StoreEmbedding Shopify into a websiteHow simple is it to set up a Shopify integration in a CMS? Once the Javascript Buy SDK is embedded into a CMS, there are only a few simple steps that you need to follow for the store to appear on a website.SetupTo use any of these examples, we first need to set up clients in the main Shopify JavaScript file. The following JavaScript code initializes the website to the Shopify store:Once that is set up, the CMS can be configured to embed a store into any page on the website. One way of doing this is to have a script that specifies a Product or Collection that can appear on that page, like so:This is the way that it has been set up in the Northern Village CMS, however, there are different ways to do this. The following are instructions on how the Javascript SDK can be set up in your CMS.Configuring your CMSThe code below, provided by the team at Shopify, outlines how the Shopify SDK works, so that it can be placed into a CMS. It demonstrates the different and simple ways you can use the JavaScript Buy SDK to build ecommerce into any website. Head over toGetting startedfor more details.Product CheckoutThis example illustrates the simplest way to integrate ecommerce into your site in order to allow visitors to purchase a single product. It creates an HTML anchor element that links to the product’s checkout URL.We’re going to create markup in our JavaScript, therefore our HTML can just include a container element.<divclass=""product""id=""product-1""></div>After fetching a product with the product ID, we use the promise function to generate some markup with the required attributes and content, and add it inside our HTML container element.Product Add-To-CartThis example illustrates the use of a cart to manage multiple products and variants. Only certain snippets of code will be highlighted from the full example, available in asubfolder in the JS Buy SDK repository.First, the app makes a call to retrieve the product. Then, it sets a few variables to store the default selected variant, the selected variant’s image, and the variant options available for the product.The demo then updates the HTML structure for the product using theupdateProductTitle,updateVariantImage,updateVariantTitle, andupdateVariantPricefunctions, and builds out <select> elements for the product’s variant options and appends them to the product’s HTML markup.Various listener functions are called to watch for ‘Add to Cart’ button clicks, variant option changes, and increment/decrement buttons for the variants in the cart.TheattachOnVariantSelectListenersfunction updates the product.options when a selected option is changed, then calls the various update functions with the new selected variant and selected variant’s image.In our example application, when a product variant is added to the cart, theaddVariantToCartfunction handles a series of things. First, it updates the cart model. It then uses the line items in the cart to build the required markup, in order to display the cart items in the DOM.Show/Hide CartAdditional event listeners are used to toggle the cart’s visibility on/off, by adding and removing the js-active class on the cart.An affordable way to have an online storeThe Shopify JavaScript Buy SDK makes it easy to create a store within any website. This opens up possibilities for introducing customers to the idea of an online store, with lower risk and potentially higher reward.This allows you to use Shopify’s robust, full-featured admin interface and checkout process, while retaining the look and feel of your client’s website.You might also like:The Power of Partnerships: How to do Right by Your Clients and Make Money in the ProcessHow are you using the JavaScript Buy SDK? Tell us in the comments below!"
9,"Building a great system and workflow is one of the hardest things to do. For a long time, building icon systems for themes and websites meant using iconic fonts. But as browser support has improved, inline SVGs are the new hot thing.An SVG icon system is a way to compile a set of icons to use throughout your site, with an inline SVG sprite sheet and the<use>element to reference an icon.Many designers and developers want to use an SVG icon system but don’t have Shopify set up locally, or use build tools like Gulp and Grunt. If that’s the case, this tutorial is for you. This tutorial will show you how to use SVG sprites for the first time, especially helpful if you’re still using iconic fonts and want to move over to an SVG icon system.We’ll be usingVectrto create and export custom SVGs, and an app calledFontasticto create our SVG sprite. I also link to other tutorials about setting upSVG sprites on Shopify with Gulp and Gruntat the end of this article.Learning Liquid: Getting Started with Shopify ThemingGet this free guide and learn practical tips, tricks, and techniques to start modifying, developing, and building Shopify themes.EmailGet free copyBy entering your email - we’ll also send you marketing emails related to Shopify. You can unsubscribe anytime. Note: the guide won't be delivered to role-based emails, like info@, developer@, etc.Our virtual cogs are turning.Please note that it can take upto 15 minutes for our emailto reach your inbox.1. Preparing your SVGsTo prepare custom SVGs for your icon system, you’ll need to use a program like Illustrator, Sketch, orVectrfor the creation of any custom icons. If you’re already using an iconic font, you’ll need to make sure you have an SVG version of your font to create an SVG sprite, using a third party tool.When exporting fromVectr, make sure to chooseselectionas the source, andsvgas the format, if you haven’t set up your page sizing ahead of time. This will ensure that the exported SVG doesn’t include a bunch of whitespace the same size as the page.2. Building your icon setTo build your icon system you’ll have gather your icons, whether from an existing font or set of vector graphics, and import them into Fontastic.Convert your font or upload your custom iconsIf you have an iconic font that you need to convert to, and an SVG font format, you can do that with thisonline font converter.Once you’ve converted your font to SVG, you can upload it by creating an account onFontastic. To add your existing iconic font, simply click on theAdd more iconsbutton in the top right menu.You can add individual icons the same way, or to an existing set that you’ve already created. ClickImport icons, then choose your SVG font, or custom SVG icons.Choosing from existing icon setsAlternatively, you can build a custom icon system from existing icon libraries. To save on load times and improve performance, I would recommend always creating icon systems thatincludeonly the icons that you will use.If you’re only using 10 of them throughout your site, there is no good reason to link to the entireFontawesomelibrary of icons.Choosing from an existing icon library like Font Awesome.Once you’ve chosen the icons you wish to use in your SVG icon system, you can also customize what those icons will be called later on. Often, the names of these are imported from the name of your uploaded SVG. Thecustomize tabwill allow you to update the name of each icon in your icon system.3. Choosing how you want to embed your icon systemNow that we’ve created our icon set, we need to link it to our website or theme. We can do this a few ways, the simplest way is to use an easy embed code snippet. You can also find manual instructions on how to embed your SVG sprite on theFontasticwebsite.Easy embed code snippetOne excellent feature of Fontastic is that it generates a single permanent code snippet for your SVG sprite. This means you can update it at any time, and simply republish. The link stays the same, and it’s this link that you can use in the<head>of your theme to connect your website or theme to your SVG sprite.Under the Fontastic publish screen, choose theSVG sprite tab.You will then need to copy and paste the code snippet into the<head>element of your Shopify theme. For most Shopify themes, you can find the<head>of your Shopify theme by going toedit HTML/CSS pagein the Shopify Admin, and then navigating to thetheme.liquidfile.Within the open and closing<head>tags paste in the code snippet you copied from Fontastic.4. Adding the CSS for your icon systemTo ensure that your icons display at the correct size, you’ll have to add some additional CSS to your Shopify theme. In your theme’stheme.scss.liquidfile, you’ll need to add the following CSS:[class^=""icon-""], [class*="" icon-""]{
  height: 32px;
  width: 32px;
  display: inline-block;
  fill: currentColor;
}Theheightandwidthproperties control the default icon size. To adjust the size, simply adjust the values. To change the icon color, you can use thefillproperty. ThecurrentColorkeyword inherits the color value of a parent element, this can be changed for specific icons by using a class name on the icon, and setting it to have a specificfillcolor.Icons not displaying properly? CSS conflicts?If you’re using a theme from the Shopify Theme Store that already has some kind of icon system in place, you might have CSS conflicts. What that means is the CSS we added to the style sheet that correctly sizes our icons for use, may be conflicting with other CSS in the theme.One way of getting around this conflict is name-spacing our custom icon system, using a custom CSS class prefix. You can do this in Fontastic by going toModify Font, and adjusting the class name.Note:If you update the CSS class prefix to name-space the icon system, the above CSS selectors will need to change to whatever the new name-space is.5. Using your icons!To use your icons, all you need to do is copy and paste the code provided in the icon reference.Choose the icon you want to use, and then paste the code reference where you want the icon to display.In this example, I’m updating a template to include a search icon before the title on the search results page.Some benefits of using SVG sprites include:Visual renderingSVGs always render sharply, with no anti-aliasing, the way some iconic fonts do.Greater CSS control ability to animateSince you can target inline SVG paths, you have greater control over icon animations and how those icons are styled with CSS.Semantics and accessibilityInstead of using glyphs inside::beforeelements, a browser should know you’re serving up an image. With inline svg sprites, the browser understands that this icon is an image. You can even provide titles for SVGs to aid screen readers.You can find afull comparison breakdownby Chris Coyier on CSS Tricks.You might also like:Designing with SVG: How Scalable Vector Graphics Can Increase Visitor Engagement.Other apps: IcomoonMany other articles on this subject look at Icomoon to accomplish something very similar toFontastic.me. Fontastic not only has access to a variety of icon libraries (similar toFontelloandIcomoon), but it also has the option for a permanent hosted CDN link for your SVG sprite on a free account, with unlimited bandwidth.Unfortunately with Icomoon, you can’t get a permanant link without a premium account. In both cases, for commercial projects make sure you have the proper license if you choose to use their cloud service. Icomoon does have some editing tools and other perks, which also makes it another excellent tool for creating icon systems.SVG icon systems with Gulp and GruntThere is agreat tutorial written by Carson Shold, a front-end developer here at Shopify on how to use gulp to create an SVG icon system.Chris Coyier has also written an articleon how to how to do this with Grunt, it’s not specific to Shopify, but pretty straightforward if you’re already used to using a task runner.Browser supportSVG icon systems have become pretty commonplace. If you are using the easy embed code snippet through Fontastic, then no worries! It comes with built-in support for IE9+, using theSVG4everybodypolyfill.And if you’re using a Shopify theme, as long as you have the SVG4everybody polyfill, you can implementexternal SVGwith no issues for all of Shopify’s supported browsers.Additional resourcesMaking the Switch Away from Icon Fonts to SVG: Converting Font Icons to SVG— Outlines how to create SVG sprites, with Icomoon and Font Blast.Ten reasons we switched from an icon font to SVG— How and why lonelyplanet.com switched from an icon font to SVG.The Great Icon Debate: Fonts Vs SVG— A great article on sitepoint.com about the debate between iconic fonts and svg icon systems.A Compendium of SVG Information— A huge list of articles about SVG. Breaking down different topics into categories with links and descriptions about each article.It’s not hard!All in all, building icon systems with SVG isn’t that hard! If you have the right tools available, it can be a pretty easy switch. The benefits of SVG sprites have been discussed at length, and the consensus in the web community is that SVG icon systems come out on top when compared with iconic fonts.How do you work with SVGs? Tell us in the comments section below!Learning Liquid: Getting Started with Shopify ThemingGet this free guide and learn practical tips, tricks, and techniques to start modifying, developing, and building Shopify themes.EmailGet free copyBy entering your email - we’ll also send you marketing emails related to Shopify. You can unsubscribe anytime. Note: the guide won't be delivered to role-based emails, like info@, developer@, etc.Our virtual cogs are turning.Please note that it can take upto 15 minutes for our emailto reach your inbox."
10,"Do you focus on accessibility when building Shopify Themes for your clients?If your answer is no, you’re missging out on a major opportunity to increase the usability of your site for a large portion of the population, looking for their next purchase online.We want to help you get excited about accessibility, understand its importance within the web industry, and inspire you to integrate accessibility checks in your daily development workflow. We’ll also demonstrate some simple ways to make your clients’ online stores the best in the world, for everyone.The importance of web accessibilityAccessibility, also know to many as simplya11y, is all about using design and code strategically to make the content of your websites or online stores consumable for all users, whether they live with an impairment or not.According toresearch conducted by Cornell University,the National Eye Institute, andMicrosoft, accessibility impairment is far more common than most of us would believe. In the United States alone:2.3 per cent of people live with reading disordersAs many as 8 per cent of men have a form of colorblindness7 per cent of adults live with a severe dexterity difficulty3.6 per cent reported a hearing disabilityBut these numbers only report on individuals who have self-identified as living with a permanent disability. Countless situations arise that could leave your users with temporary impairments to their vision, hearing, or dexterity. It’s vital that as a developer, your site is built to allow any of these users to easily interact with content.Accessibility is also quickly becoming a mandated part of the web. Many of your clients, whether Shopify merchants or not, probably already live and work in jurisdictions that have legal requirements for how accessible their websites must be — with many more moving towards that standard.That’s why when working towards accessibility, developers often refer toWCAG 2.0— the international standard for building accessible websites. By building websites that are compliant with the WCAG standards, you’ll also be compliant with the majority of the accessibility laws in most regional jurisdictions.It’s important to research and understand these specific accessibility mandates before beginning too much work on your project. Feel free to read more about these geo-specific regulations onW3C’s regional policies page.You might also like:Why and How to Improve Ecommerce Website AccessibilityHow to work accessibility into your existing workflowOne of the biggest reasons cited for not focusing on accessibility during development, is the perceived impact it has on your ability to deploy on time. To many, accessibility is just one extra step to add to an already test-saturated workflow.But it’s vital that you interact with your online store as you build it, in order to check whether the changes you make are working or not. This is especially true when tweaking things with regards to accessibility, wheretesting and demoing changes can flag any issues or unveil additional opportunities.Here are a few methods and tools you can use to smoothly integrate accessibility checking into your existing workflow.1. Keyboard navigation testThe keyboard navigation test is one of the easiest, unintrusive, and low cost techniques you can use to assess accessibility within your daily workflow.Essentially, all this test requires is for you to try to navigate your website by relying solely on the tab key on your keyboard. This allows you to evaluate the ease of which a user can navigate your site, when trying to reach a given element via their keyboard. The keyboard navigation test also helps identify if interactive elements and modals can still be triggered without touching the mouse.It should also be obvious what element you are focused on in any particular moment, while running a keyboard navigation test. For most browsers, there are default:focuscss styles that areapplied to focused elements, such as a blue outline shadow. However, these:focusstates can be overridden in CSS, so it’s important that if they are overridden that they aren’t removed completely, but rather enhanced to match existing theming or styles.Try tasking yourself with accomplishing a particular action on your site — say add a product to cart and checkout — when using this technique.2. Screen reader testScreen readers are programs that allow visually impaired users to understand any text that is displayed on a web page. They accomplish this by “reading” the on-page text, or alt text, of a specific element out loud when a user tabs through the web page elements.While it may be tempting to run your screen reader and keyboard navigation tests simultaneously, it’s recommended that you don’t. Some keyboard interactions are only possible when a screen reader is turned on, and thus could impact the perceived results of your navigation test.It’s important to use screen readers with the browsers they were designed for. If you test your site within unsupported browsers, you can end up wasting your time tracking down problems that users won’t ever encounter in the real world. If you’ve never worked with one before, you can use the following screen readers for your tests:VoiceOverfor Mac/iOS and SafariJAWSfor Internet ExplorerNVDAfor Windows FireFoxChromeVoxfor Google Chrome3. Automated accessibility testsWhile the aforementioned tests require a manual process for accessibility evaluation, there are some automated options for those of you trying to keep your workflow as lean as possible.Think of automated accessibility tests as similar to using a code-linter — just because your JavaScript passes linting, doesn’t mean it will necessarily do what you want it to. The same concept applies to automated testing tools. They will help you avoid common mistakes, but they can’t help you produce an accessible page, without manually testing your assumptions.If you do opt for an automated accessibility test, remember that they will not provide results as accurate as manual checks.Here are a few automated accessibility tools you can check out:Accessibility Developer Tools— This Chrome extension adds an accessibility audit, and accessibility sidebar pane, directly into your Chrome Developer Tools.Addy Osmani’s a11y tools— This series of command-line accessibility tools allow you to run audits against local or remote URLs, to identify areas where improvements can be made.aXe: The Accessibility Engine— An open-source JavaScript library that performs automated accessibility audits within your testing framework or browser of choice.HTML_CodeSniffer— A JavaScript-based bookmarklet that runs a simple accessibility audit, including color contrast checks and markup recommendations, on any web page you’re interacting with.Tenon.io— A paid subscription service that performs accessibility checks on your site, or in your code using API tests within your existing CMS’ publishing workflow.You might also like:9 Tools for Website Accessibility Testing4. User testingThe holy grail of accessibility assessment is user testing.Regardless of how detailed your accessibility audits are or how often your perform them, you will never actually use your website as someone with a disability would. However, many developers or clients do not have the budget, or are not willing to spend the money, to run a user accessibility test.If you can afford it, it can be extremely insightful to get someone to test your site, app, or product from an accessibility standpoint. This will give you a thorough understanding of how a user with a disability would actually interact with your build, before launching it.You might also like:Why, How, and When to Utilize Usability TestingAccessibility and Shopify ThemesNow that I’ve convinced you of the importance of accessibility, let’s take a look into how you can start using accessibility principles when developing Shopify Themes for your clients.From a development perspective, HTML is the bedrock of your website’s accessibility. By ensuring you include semantic markup and descriptive tags where appropriate, your code will be able to better inform users of the kind of content that lives on your site. For Shopify stores, the same principle applies alongside some quick changes to Liquid too.The high-impact elements featured below are ripe for accessibility optimization, and were identified while researching and testing accessibility in our own themes on the Shopify Theme Store.1. Images and alt textAny graphical element on your page that contains relevant information for the user — such as a product image — should have a text fallback to be truly accessible, and for images this is thealtattribute.Alttext is extremely important for users who rely on screen readers to interact with your on-page content. When written effectively,alttext provides screen readers with a contextual description of what is displayed within an image, rather than just a random URL that points to your jpeg file.When draftingalttext, try to keep things clear, concise, and contextual to provide your users with the most beneficial description possible. For example, if your store includes a product image for blue suede shoes, youralttext should read “blue suede shoes” or “blue suede shoes product image.”Shopify helps facilitate this process by automatically generatingalttext for product and collection images. For product images in particular, Shopify will take the product name and automatically set it as thealttext for you.Alttext should also be applied to any images you are uploading through your theme settings, such as heroes or slideshows. For example, if you don’t have a setting that will work contextually with the image when using a slideshow, you can add analtsetting under the image that defaults to theslide_headingsetting to define your alt text.It’s important to note that you should leave the alt tag blank where images, which are purely decorative, and not part of your theme’s core content, such as your background images. This will ensure that users are presented with only the most relevant content needed for their shopping experience.2. IconsIcons are used in almost every online store, as they canenhance your ability to quickly communicate key actionsyou want your users to take. But just like images, icons can lose this function entirely when users have a visual impairment, and rely on a screen reader to navigate the web.I’m a firm advocate for the usage of SVG icons in all designs, but in their standard state, they can present difficulties for accessibility. Screen readers are unable to read SVG elements, and because of this they will not know to say “cart” when hovering over your cart icon.Instead, you want to hide that element from the screen reader entirely, and opt for an additionalspantag to provide fallback text. If we were implementing this for the cart icon in your main navigation bar, you’d want to include something similar to the following:3. FormsForms are another prime area for accessibility improvements, considering they're widely used in almost every online store for things like email subscriptions, commenting sections, product reviews, and checkouts. It’s not just their frequency of appearance that makes them important to consider, but also the fact that they’re highly interactive elements that are used on a regular basis by site visitors.There are two primary ways to increase accessibility on your forms. One way is to make your HTML more semantic by adding labels to all inputs, even if they are hidden to the user. The other way is to manage error and success states through the use of contextual copy, which can be read by screen readers, and not simply color alone.Note:While these specific tips are focused on forms, they can actually apply to any interactive element on your site, such as your navigation menu.Below is an example for a comment section on your online store. We can use aform.errorLiquid object to display any errors (and likewiseform.successobject for successes) when users are filling out our form.4. TablesTables can be exceptionally frustrating to work with, especially if you’ve ever tried to build a layout using them instead ofdivsorspans. However, if we usedivsandspans, screen readers would have no indication of how to tie the pieces of content together, so tables are the best alternative.To achieve accessibility in your tables, you’ll want to visually hide your header, but allow the screen reader to still read its content for visually-impaired users. At the same time, you should include labels with CSS itself to pull out the data label attribute and visually present it to readers without audio. This gives you an entirely accessible table that still allows customization on the visual layout.Here’s a simple way of accomplishing this in your theme:5. PricingPricing can vary widely across online stores. Some display prices with decimals, without them, and some use superscripts for cent on the dollar.While superscript looks quite visually appealing in your design, screen readers become confused when trying to understand the relation between the separate HTML tags of your price.You can accomplish this by adopting a pattern quite similar to what was demonstrated for icons above, where we visually hide the value from the user in a second span, while hiding the first span (shown visually) from the screen reader.Here’s an example of what that looks like applied to a price in a list item:Sale or discount prices is another area you could optimize for accessibility within your theme. It’s common to use color and strikethrough formatting to demonstrate price differences when illustrating a sale price on your store. These visual cues allow the user to understand what is the new price, what is the old price, and what the relation is between them.When we remove this visual cue and rely on a screen reader, we’ll often hear what sounds like two unrelated numbers sequentially — which can be very confusing for the user. To provide them with the context as to which price is the sale price, and which is not, you should add another visually-hidden span tag following your product price as shown below:6. Color contrast and textWe can’t talk about accessibility without touching on color contrast. How you decide to pair your background images and text can severely impact the legibility of your web content for all users, not only those living with colorblindness or another visual impairment.It’s important to check your design as you’re working, so you can catch any problems before you’ve invested too much time into your project. Otherwise, you might end up having to re-do countless hours of design work in order to make your site fully accessible.While we don’t necessarily have a Liquid snippet you can use to tackle color contrasting, we have previously published a thorough article that covers five techniques forimproving your ecommerce design for colorblind users.Become an accessibility-informed developerBeing an accessibility-informed developer means taking the time to think about and evaluate your work, as you’re building it.It’s taking on the perspective of your potential user and asking yourself questions, like “what happens if I hit tab on my keyboard?” or “how would I accomplish my goal if I had to use a screen-reader or another assisted web-reading device?”Together, we can work towards a world where anyone can easily shop online, without having to worry about whether they’re actually able to interact with the website or not.Let’s start making the web more accessible, one theme at a time.Do you incorporate accessibility checks into your theme development workflow? Share your tips in the comments below."
11,"There will be occasions when you need to enable password protection on your own, or a client’s, Shopify store. This may be because the site is still being built and tested, or you need to make a quick change to the theme. Perhaps you’d like to tweak some product collections, or it might be a permanent fixture of your gated wholesale business.By default, Shopify allows you to add a custom message (which can include HTML) to the default password protected page, and will display this message along with a default login form that will allow access to the store. The default template also provides links for store owners to access the Shopify admin.This page is functional and works well. However, if you need a longer-term solution, you may wish to invest some time and create your own password page. You can do this by customizing thepassword.liquidtemplate. I often find that even seasoned theme developers aren’t aware of this template, but thankfully it’s easy to set up.Landing pages are a critical part of marketing. Learn more about how to build a customlanding page.Creating a custom password.liquid templateThere are two ways to create the template. The first, and simplest, is to use the online theme editor. It’s a short process (see steps and image below):Under Templates, click “Add a new template.”From the “Create a new template for” drop-down menu, choose “password.”Click “Create template.”This will result in a newpassword.liquidfile being added to your templates directory. You’ll notice that the file has a number of key components:{% layout none %}has been applied, which allows us to design the page without the defaulttheme.liquidlayout file being applied.The Doctype and HTML elements are included, as we aren’t using a layout file.Inline CSS is used, as asset files (excluding images) aren’t accessible when the store is password protected.A Liquidifstatement to show the merchant’s password message or a default message if it is blank in the Shopify admin.A form is generated in Liquid with standard inputs for password and submit (examples below).The second way is to add a file namedpassword.liquidto your theme’s templates folder and upload it (along with all your other theme files) eithervia the Shopify adminor the deployment tool of your choice.You might also like:How to Use Liquid's ""case/when"" Control Tags in Shopify ThemesTemplate componentsAs with all Shopify templates,thepassword.liquidtemplate is a blank canvas. You can add as much or as little as you need. You could simply bring the page inline with the store's branding (type, colour, logo etc.) or you could include any of the following components, which regularly feature on “coming soon” and “password protected” pages:A countdown timer displaying days, minutes, and hours to launchAn email newsletter signup formA teaser video of upcoming productsLinks to social media accountsA full-page background to showcase popular productsRegardless of which direction you take, below are two code examples that may come in useful when customizing your password templates.1. Display the password messageThis example checks for the existence of a password message and ensures it’s not a blank string (for good measure). If the conditions aren’t met, the default “This store will be opening soon…” paragraph will be displayed.{% if shop.password_message and shop.password_message != ‘’ %}
{{ shop.password_message }}
{% else %}
<p>This store will be opening soon...</p>
{% endif %}If you don’t require the default message, you can also approach it as follows:{% unless shop.password_message == blank %}
{{ shop.password_message }}
{% endunless %}2. Display a password formThanks to a Liquid form helper, it’s easy to generate a login box should you require one. This example also includes output of any form-related errors. You can also customize how to display these error messages. More information on how to do this is available in theShopify Docs.{% form 'storefront_password' %}
{{ form.errors | default_errors }}
<label for=""password"">Enter store using password:</label>
<input type=""password"" name=""password"" id=""password"" autofocus="""" />
<input class=""btn"" name=""commit"" type=""submit"" value=""Enter"" />
{% endform %}You can of course choose to not include any of these elements — it’s entirely up to you and your requirements.Points to rememberIf apassword.liquidfile exists, it will be displayed regardless of its contents.While images are accessible via the Liquidasset_urlfilter, all CSS and JS must be written in the template, as assets stored within the theme will not be available.You can choose to include the password message or not — there’s no requirement to do so.{% form 'storefront_password' %}is available if you wish to include a login form.Further information on thepassword.liquidtemplate is available in theShopify Docs.Have you created a branded password page for yourself or for a client? Share the link or screenshot in the comments below.Learning Liquid: Getting Started with Shopify ThemingGet this free guide and learn practical tips, tricks, and techniques to start modifying, developing, and building Shopify themes.EmailGet free copyBy entering your email - we’ll also send you marketing emails related to Shopify. You can unsubscribe anytime. Note: the guide won't be delivered to role-based emails, like info@, developer@, etc.Our virtual cogs are turning.Please note that it can take upto 15 minutes for our emailto reach your inbox."
12,"Split-testing makes you a better designerbecause it’s the ultimate litmus test of revenue, handling client disputes, and satisfying clients (you can’t argue with a statistically proven 12 per cent increase in revenue).And while tests can be done on micro-conversions, like form engagements or click-throughs, these types of actions are not always correlated with revenue.I could claim to offer visitors a free Ferrari if they visited the cart page. A lot more people would get one-step closer to the purchase, but fewer would convert due to the distraction, deception, and ultimate disappointment.Micro-conversions should be tracked butoptimizations need to be revenue-driven. Profit is the essence of ecommerce, and few retailers are optimized enough to warrant attention on micro-conversions.But how do you actually perform a revenue-driven split-test in Shopify?We know conversion optimization is key, and can see how split-testing near-instantly turns around an unprofitable store. Yet it isn’t entirely clear to many designers and agencies how to A/B test a new product page, or how to test an entire theme.Yet it can all be done.Today, I’ll show you, step-by-step, how I test anything in Shopify stores to inject profit into a client’s bottom-line.You might also like:How to Successfully Execute an Iterative Redesign in Shopify with OptimizelyThe challenge with testing in ShopifyIt is technically simple to run split-tests of visual elements on Shopify Plus stores. If you want to test “Add To Bag” text on the button of your product page against “Add To Cart”, you create a jQuery that selects a unique CSS identifier inside your favorite split-testing tool. There is little difference to testing within Shopify Plus compared to most websites because you have full control over the checkout funnel.The challenge with testing in Shopify is with the majority of merchants who use the checkout.shopify.com domain, and don’t have the required control over the checkout funnel. This means it can be hard (or impossible in some tools) to test for revenue.It all has to do with cross-domain tracking with little munchies called “cookies.” Testing tools set a first-party cookie, associated with the store’s domain. Due to browser restrictions, these cookies do not exist outside thedomain name. Once a visitor converts on the Shopify checkout page, tools cannot link them back to the experiment.As we’ve covered, revenue is critical to track. Safari is the primary browser known to block third-party cookies by default. Browsers that do not automatically block third-party cookies, allow users the option to block them. Visitors are tracked on your domain, but their conversions outside of your domain are lost on browsers that do not support these cookies.This means you have to exclude a portion of users from the experiment right off the bat (namely Safari users), which can introduce a bias to your results. If you view the “Tech” reports in Google Analytics, most stores will have browsers with different conversion performance:If you do not exclude these browsers from the experiment, your results can be skewed by those users who entered the test and converted, but were not tracked because the third-party cookies were not available at the time of their conversion. Therefore, the conversion rate reflected in your results would not be accurate.Even if browsers we know block third-party cookies and are excluded from the experiment, visitors using browsers like Chrome and Firefox ,or ad blockers, may block third-party cookies in their settings. Since we have no way to determine this, the conversions from users with this setting enabled, will not be tracked even though they were initially included in the experiment.The best we can do is run a large number of conversions per variation (300 minimum) and integrate the data with analytics, (which we will cover) so a breakdown can be done.Finally, asmart store will have an abandoned campaignthat markets to well-qualified visitors. Abandoned cart emails present an unavoidable factor you should be aware of, which may not convert in the split-test. You will get sessions but no tracked conversions.The primary reasons for this are multi-device swapping (someone enters the test, abandons cart, then clicks the abandoned email on another device and buys) or email campaigns that take visitors to resume orders at checkout.shopify.com (stores with applications likeKlaviyodo this).Step-by-step on creating a split-testThe first step is to identify what to optimize. This is a balance between what is easiest and what you estimate will create the greatest profit.Sometimes the best path to 50 per cent jumps in revenue is a whole new theme, which can easily take a month of programming. You need to consider the cost of development, and the lost sales each day the site is unoptimized — so the biggest profit opportunity is not always the best.I have two default recommendations. The first is to make the simplest change that is likely to grow profit the most (low hanging fruit). My second recommendation is to work closest to the payment as possible, then progress backwards along elements in which every customer must engage. Tommy Walker discussesoptimizing closest to the money in his articleon reducing shopping cart abandonment. The bigger the profit boost and the sooner it happens, the happier everyone will be.An example of a simple change fromBryan Eisenberg’s hierarchy of optimizationis functionality.Does the store satisfy a visitor’s needs? Every interested buyer wants to know how much their order will cost. If they cannot find clear costs for delivery, expect this change to increase profit. A lot of stores likeBlackMilkhave good success in mentioning their delivery information in the header.Here are a some of my favorite questions, taken from my bookShopify Conversion Rate Optimization, that you can ask in surveys to solve problems at various levels of the hierarchy of optimization:What almost stopped you from buying from us?The best question a merchant can ask on their thank you page.What other options were you considering before buying from us?Another good question post-purchase to understand the psychology of options and competition.It seems you didn't complete your purchase, can you share why not?Great for when people leave the cart page or stay on it for more than 20 seconds.What other information would you find helpful on this page?Trigger after 20 seconds to show only to an engaged visitor. Good for product pages to fill in information gaps.HotJaralso has agreat action planand set of tools to help you identify what to test.How to configure a test for ShopifyYou’ve learned about cookies and revenue tracking, now it’s important to select a testing tool that works in Shopify. The tool also has to be affordable and simple to implement.I also recommend picking an option that is fast, because we know from study after study that speed is correlated with revenue in ecommerce. ConversionXL recently published a great study on thespeed of split-testing tools:When all these criteria are considered, your best options areConvert ExperimentsandVisual Website Optimizer(VWO). Other tools, like Optimizely, are viable for Shopify Plus stores.My preferred tool of choice is Convert Experiments. Each of the three tools I recommend have clear tutorials to set-up in Shopify:Convert with ShopifyVWO with ShopifyOptimizely with ShopifyOnce you have added the required scripts, configured the test settings, and set-up your goals, there’s another critical integration you must set-up in order to optimize for revenue.Google Analytics integrationOne last configuration you need before creating the actual split-test, is to integrate your testing tool with Google Analytics. Always integrate with Google Analytics for segmentation.Go toReports>Tech>Tech details>Platform/ device categoryto review the store’s performance by platform or device category and identify outliers.The first requirement of any analytics integration is to get a clean analytics set-up. There’s a lot more you need to do than setup enhanced ecommerce tracking, like keep out spam hits, track your big customers across multiple devices, see the full funnel process, set-up content groups, and use cross-domain tracking. Follow myGoogle Analytics Setup for Shopifyto get clean data in all these scenarios.Most testing tools provide a good guide to integrate with Google Analytics 4.Here are the main testing tools, and their steps to integrating with GA4:Convert integration with Google Analytics 4VWO integration with Google Analytics 4Optimizely integration with Google Analytics 4You might also like:A Short Tutorial for Running A/B Tests in Shopify with OptimizelyVideo example of creating a split-testHere’s a short video tutorial I created that demonstrates an actual test being created for a Shopify store. This shows a simple split-test, using the visual editor of Convert Experiments:Bonus testing tips for ShopifyHow can I test price?You can’t test price in Shopify with a split-testing tool because the tool alters data at the DOM level. Previously in Shopify, to test a product's price you had to make changes to the product itself over a set period, then contrast it to the old price. It's imperfect given the variable nature of traffic sources and seasonal trends.Now you can use theQuant Price app. Products with high turnover are the most suited to be tested. If you haven’t discussed optimizing the pricing of products with clients on Shopify Plus, do it now. It’s devastatingly effective — the simplest thing an established store can do to jack up profit.I’m having trouble designing my test. Any advice?It’s possibly a wiser step is to make the change on the site so it becomes the “control.” You can then create a test in the visual editor of the testing tool, to bring it back to the original version. The amount of jQuery required can otherwise get convoluted for complex tests.How can I test alternate templates?A new template can be created with the syntax:default_template_name.*.liquidIf you append?view=listto any collection URL, your store will use the collection.list.liquid template. If you use?view=gridat the end, the store will call thecollection.grid.liquidtemplate.Keir Whitaker has writtenabout this method. The same goes for other pages like the cart.This is a less than ideal way to test a Liquid template on a page-by-page basis. Unfortunately, site-wide theme tests do not work with this, because the “view” query string is lost with user navigation. The above is a better solution.And speaking of URLs, learn what acanonical URLis and why they're so important.How can I test a new design site-wide?This is a neat hack I figured out to test diverse design changes. You can test new product page designs, and have it stick across all product pages for the duration of the test!Duplicate the existing theme, then make changes as needed in the duplicate theme. Also add the following CSS:.shopify-preview-bar { display: none }The line of code removes the preview text at the bottom insert by Shopify, so users in the variation do not see it.Preview the new theme from within the Shopify admin, then view the source code in the head to get the theme’s ID. In the below example, we see the ID is 65568381:<script>//<![CDATA[var Shopify = Shopify || {};Shopify.shop = ""mygoods.myshopify.com"";Shopify.theme = {""name"":""[LIVE] My Goods"",""id"":65568381,""theme_store_id"":null,""role"":""main""};//]]></script>Then, what we need to do is append?preview_theme_id=65568381as a variation for a URL test so that the new design loads for 50 per cent of people who visit the store. Here is exactly how to do it inside Convert Experiments:Create an A/B URL test. Make the control URL:http://www.store.com([^\?]*)??(.*)$Use the following as the variation 1 URL, where thepreview_theme_idvariable is what you discovered from the source code. This code appends thepreview_theme_idvariable to load a new theme:http://www.store.com$1?preview_theme_id=65568381&$2Then enable “Support Regular Expressions”. Your test variations will look like:The last thing you need to do is include all pages in the test with the site area settings:http://www.store.com/{0,1}(([\?&]{1}[^=]{1,}=[^=]*[&]{0,1})*)$And exclude pages when the query string contains:preview_theme_id=65568381Be sure there is the necessary Convert Experiments testing code in the Liquid files of the duplicated theme. You can now test any design change you want in Shopify.Get testingHopefully, this tutorial and video have helped demystify some of the confusion around revenue-driven split-testing in a Shopify store.As we all know, profit is the essence of ecommerce, so make better design decisions today by testing for revenue!You might also like:How A/B Testing Will Make You a Better Web Designer"
13,"Many store owners are reluctant to run A/B tests on their store, for a variety of reasons. One of the biggest reasons is not knowing where to start. Luckily,Jonathan Poma and I talked about this issueseveral weeks ago, so make sure to start there before reading this article.Another big reason owners are reluctant to test, even if they knowwhatthey want to test, is because they aren’t entirely sure how to go about it. That’s what we’ll talk about today.A quick note about testing tools: since Shopify handles your site hosting, you only need to worry about your testing platform. At Rocket Code, Optimizely is the platform of choice for our clients and our own website (full disclosure:Rocket Codeis a one-starOptimizely Solutions Partner.) Optimizely offers robust testing tools that are easy enough for anyone to use, but also powerful enough to give you the data you need to make the right decisions.When it comes to testing in Shopifywith Optimizely, there are five key steps to take for a successful test: writing your code, setting up your test in Optimizely, previewing your test, letting it run, and cleaning up. In cases where your control — the original experience you’re testing against — wins, you may need to repeat these steps until one of your variations wins. These repetitions are called iterations, and they’re critical to the testing process as they help you truly optimize your store.Let's take a look at this process, based on an experiment we did a few months ago with one of our clients,Chubbies Shorts(the shorts of choice in our office).You might also like:How A/B Testing Will Make You a Better Web DesignerStep 0: Check yo’ selfBefore we begin, a caveat about tracking goals: if you intend to track revenue, or other goals related to completing checkout,you or your client must be on a Shopify Plus plan, and your checkoutdomain namemust be the same as the base domain of your store.Using Chubbies Shorts as an example, since their store is on Shopify Plus, Optimizely can clearly tie the checkout page to the store, since their checkout resides athttps://www.chubbieshorts.com/checkoutWere their site not on Plus, the checkout URL would look something like this:https://checkout.shopify.com/123569/checkoutsOptimizely wouldn’t be able to tie the above to their store.But in many cases, you may not need to tie revenue or checkout with a goal. For example, you may want to see if more people interact with a button or link that opens your size chart. There may be a revenue change based on that, but if you’re more worried about interactions with elements in your store, rather than if users are getting all the way through checkout, then you’ll do just fine with basic click goals.Step 1: Make the code happenAnother caveat before we get started: you must do your initial work in a theme that is not live in your store; we'll call this the development theme. Using a development theme will allow you to make changes without accidentally affecting your users. To create one, go to the Themes admin area, click on the three dots next to your theme name, and select “Duplicate.” This will create a copy of your live theme that you can edit, without worrying about interrupting your user’s experience.Typically, we like to keep as much of the experiment markup as possible locked within a single file; for Shopify this would be a Liquid snippet. For this nav experiment, we created a snippet callednav-tabs, and included the HTML and Liquid markup in there.What you see above is an abbreviated version of the tabbed experiment snippet, to give you an idea of what the code looks like. This is all pretty standard Liquid templating, except for one line:if settings[tab-toggle]. This is a checkbox within your theme settings that defaults to false, and allows us to turn the experiment on and off from within the Shopify admin.What’s great about this setup is that you can launch the code for an experiment into production, but not show it to users until the experiment is live in Optimizely, and turned on within the Shopify admin. This gives you greater control over when users might see this experiment; when you have control of the majority of code in Shopify, you have access to more targeted data about your visitors (such as if they’re a customer and what kind of template they’re seeing), which makes it easier to segment them, and select what experiments are exposed to.That covers the markup. All of the functionality (JavaScript) and any styling (CSS) should also reside in your theme, if possible. We like to have as little JS and CSS as possible in the Optimizely editor. This helps keep our included Optimizely file as small as possible, since we may be running several experiments at a time.We also recommend that if you don’t already have a process to build out your JavaScript and CSS files, put your experiment's JS and CSS into appropriately named JS and CSS files (such astabs-experiment.jsandtabs-experiment.cssthat are included within yourtheme.liquid. The JS and CSS are typically locked under a particular class attached to the<body>tag, also known as a “namespace.” This helps keep any particular functionality and styling invisible until your page has the correct class.This approach can quickly become a bit overwhelming with the large number of snippets, .js files, and .css files in yourtheme.liquidand other templates. It’s therefore extremely important to remove these items once you’re ready to make an experiment variation the native experience on your site, especially if you’re running several experiments at a time. But don't worry, we'll touch on how to do this closer to the end.You might also like:How to Successfully Execute an Iterative Redesign in Shopify with OptimizelyStep 2: Set it up in OptimizelySetting up in Optimizely can be done in a number of ways, and depends on what kind of test you’re running; multivariate, redirect, and so forth. For this demonstration, we’ll assume it’s a simple A/B test, as it encompasses most of the same involved in multivariate and redirect tests.Once you’re in Optimizely and haveset up your goalsandtraffic allocation, it’s dead simple to implement and see your experiment. (The control is, well, the control so you don't need to do anything with it.)The first variation (and any other variation if you’re running a multivariate test) is where you would start adding code for the experiment, specifically where you click on the ""Edit Code"" button.As you can see in the images above, we’ve simply instructed Optimizely to add a class to the body for that variation. Once the class is added, the CSS we wrote earlier will trigger, and voila!Step 3: Preview your testPreviewing is a bit tricky with Optimizely and a development theme. First, get the preview link for your theme, which you can find by clicking on the eye icon in your Theme’s admin area:Then, you’ll need to add something extra to the URL, to tell Optimizely you want to preview this experiment. You can find the nitty-gritty ofhow this works here, but to boil it down, each experiment in Optimizely has an ID you’ll need, along with the variation you want to look at: zero is the control, one is the first variation, two is the second variation, and so on.Once you put it all together, it will look something like this:http://chubbiesshorts.com/?preview_theme_id=123076935&optimizely_x12345678901=1?preview_theme_id=123076935is what tells Shopify to show the theme (with an ID of 123076935) you had been working on, andoptimizely_x12345678901=1is the experiment ID (12345678901) and variant number (1) from Optimizely.From this link, you can interact with the experiment on your site just as a user would see things. Make sure to test your entire purchase flow before moving on to the next step, so you can be confident you’ve changed only the parameters of your experiment, and that the rest of your store is functioning as expected.Step 4: Let it run (in the) wildAt this point, all you need to do is activate your development theme to make it your live theme, and then start the experiment in Optimizely. This step, oddly enough, is both the easiest and the most daunting. Depending on your store's daily traffic, and how much of that traffic you’re allocating to the experiment, it can take a few days or a few weeks to gather enough data to get to statistical significance.Step 5: Go native (in your theme)Once your experiment has reached statistical significance, you should have the confidence to know that the data from the experiment is conclusive, usually within an extremely small margin of error. Assuming one of your variations won over the control, it’s time to make that variation native to your theme. Luckily, the setup you did beforehand makes this much simpler, and gives you two options.The first option is the simplest: just add the class you added to the body in the Optimizely experiment editor, to the<body>in yourtheme.liquid. This option is best for a quick turnaround, while you wait to perform a more concerted cleanup effort, or if you know you’ll want to remove that functionality in the near future without having to switch themes. The drawback of this option is that if you’re not careful, your theme will quickly become cluttered with obsolete or even completely overridden classes, functionality, and styles.The second option is to first remove the namespacing you added in step one, and then clear out any functionality and/or styling you no longer need. You can then move on to remove any particular logic that might be in the markup, replace the markup that lost the test with your new markup, and remove the snippet from your theme.Cleaning up your theme in this way is a best practice you should consider doing several times a year — if not every time you update your theme. A clean theme with only the functionality, styling, and markup you need helps keep your store fast and your conversions up. The only downside here is that it takes more time to implement; you need to be extra vigilant in testing your theme to make sure you’ve removed only what you needed to, and didn’t accidentally touch another portion of the page or site.In the case that your control wins, it’s still worth cleaning up your theme. After that, you can start iterating; tweaking your original hypothesis and adjusting the changes you make, to determine if you can ask a better question or come up with a better solution to the problem. Start back at step one, and keep going through this cycle until you’ve optimized to the best of your ability.SummaryWrite the code for your experiment in a duplicated version of your live theme.Set up your goals, traffic, and other test parameters in Optimizely.Preview your test and run through the shopping experience.Run the test with your new theme, resisting the urge to tweak it.Read the results, and either iterate if the control won or push your variation live.Always be iterating. Go back to one.Okay, I lied. There are six steps. You should always be iterating and experimenting to some degree, as trends and user habits are constantly evolving.Now that you know the big picture of what to test, and how to set up your test with Shopify and Optimizely, you have gained a very powerful set of skills to help boost conversions on your store. In our next and final installment, we’ll cover how to execute iterative redesigns via Optimizely.You might also like:Why, How, and When to Utilize Usability Testing"
14,"Consider this: a customer is shopping on your client’s page and scrolling through a product’s awesome description. The customer is getting excited to buy the product, but as they scroll further, they don’t see a buy button.They soon realize they have to scroll all the way back to the top to look for it, and in this moment, their excitement to buy the product is overshadowed by their need to search for the ‘add to cart’ button. Once this happens, your client might lose the customer’s interest and could potentially miss out on a sale.Any moment of purchasing hesitation – even short ones like this – can have a big impact on conversion. In this article, I will go over a couple of methods you can use to implement a sticky ‘add to cart’call to action buttonthat will stay with customers as they scroll down through a product’s description.As a source of inspiration, I have selected Frank Body and Code & Quill, two of our2014–2015 Ecommerce Design Award winners.(Side note: we’re accepting submissions for this year'sEcommerce Design Awardsright now – you could win a trip to NYC!)On Frank Body's site, the product’s description is detailed and interesting, which invites the customer to scroll through the product details. On the right hand side, we can see the sticky 'add to cart’ panel, which contains the product’s price, quantity box, and the ‘add to cart’ button. This is a clever implementation because the customer does not have to search for the price, and can add multiple quantities without having to navigate or scroll anywhere else on the page.Code & Quill also uses the sticky ‘add to cart’ panel in their ecommerce store. What’s particularly interesting about their implementation is that they allow customers to select different product variants directly within the panel itself. In this case, customers can choose between a dark grey or white book cover. They also include a price, quantity box, and sharing option. Making these details enticing could lead to purchase, or to customers checking outrelated products.You might also like:Ways to Customise the img element in Shopify ThemesMethod 1: CSS3CSS3 introducedposition: sticky;which is a hybrid of relative and fixed positioning. UnderMozilla Developer Network’s documentation, they explain that the “element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned.""For instance,#one { position: sticky; top: 10px; }will behave just like a relatively positioned element, until the viewport scrolls such that the element would be less than 10px from the top. Then, it will be fixed to 10px from the top until the viewport is scrolled back past this threshold.”Here’s aworking Codepen examplethat shows this technique in action:(Don’t see the sticky functionality below? Try using Safari instead of Chrome)See the PenSticky positioningby Shopify Partners (@ShopifyPartners) onCodePen.It’s important to note that while this is easy to implement through CSS, it’s not supported on all major browsers (including Chrome, believe it or not).Can I Useprovides us with the following support chart forposition: sticky;.If you would like to useposition: sticky;but need to support other browsers, check outthis CSS polyfillby Filament Group.Method 2: jQuery PluginOne thing is certain, we want our sticky ‘add to cart’ panel to work on all modern browsers, because we want all of our clients’ customers to have the same quality shopping experience. To do this, we can use a cross-platform jQuery Plugin. There are many jQuery plugins that perform the same functionality such asSticky-kitandWaypoints, but for this example I will useSticky.If you’re new to front-end development, jQuery plugins are resources you should take advantage of. For the most part, this is because they are relatively easy to implement and can provide you with quality functionality. To add sticky elements to our product pages, we will need to include jQuery and Sticky, and call Sticky to our ‘add-to-cart’ panel:The above code implementation will set our ‘add to cart’ panel 50 pixels from the top of the browser window, when it has been scrolled to. There are plenty of other calls we can add using Sticky to create even more interesting interactions; for more details, check outSticky’s Github page.Here’s Codepen with a working example:See the PenSticky Add To Cart Panelby Shopify Partners (@ShopifyPartners) onCodePen.You might also like:The Essential List of Resources for Shopify Theme DevelopmentScrolling and its opportunitiesAs a side bonus, I wanted to mentionScroll Magicand share a Codepen demo. Scroll Magic is a javascript library for magical scroll interactions.ScrollMagic helps you easily react to the user’s current scroll position.It’s the perfect library for you, if you want to:Animate based on scroll position – either trigger an animation or synchronize it to the scrollbar movement (like a playback scrub control).Pin an element starting at a specific scroll position – either indefinitely or for a limited amount of scroll progress (sticky elements).Toggle CSS classes of elements on and off, based on scroll position.Effortlessly add parallax effects to your website.Create an infinitely scrolling page (ajax load of additional content).Add callbacks at specific scroll positions or while scrolling past a specific section, passing a progress parameter.Check out the demo page, browse the examples, or read the documentation to get started.This Codepen example uses sticky elements for titles to simulate the contact page on iPhones:See the PenMultiple Sticky Titles with CSS and JSby Shopify Partners (@ShopifyPartners) onCodePen.Sticky calls to action: a lot for a littleYour clients want to deliver amazing shopping experiences to their customers, and you can help them do just that. Furthermore, your clients do not want to lose sales due to moments of hesitation.Adding a sticky ‘add to cart’ button that follows the customer as they scroll is a clever way of eliminating possible hesitation, by avoidingthe need to scroll all the way back up a page to buy a product.As we saw in this article, it’s just a matter of adding a jQuery plugin and one line of code to make this happen. Also, explore the possibilities of Scroll Magic — you never know when the perfect situation could arise where you want to trigger new interactions on scroll.What do you think of using sticky 'add to cart' buttons on a client's ecommerce site? Tell us in the comments section below.Grow Volume 3: Building a Profitable Web Design BusinessGet your free copy of Grow Volume 3: Building a Profitable Web Design Business sent to your inbox.EmailGet free copyBy entering your email - we’ll also send you marketing emails related to Shopify. You can unsubscribe anytime. Note: the guide won't be delivered to role-based emails, like info@, developer@, etc.Our virtual cogs are turning.Please note that it can take upto 15 minutes for our emailto reach your inbox."
15,"It can be a daunting sentence for ecommerce merchants: “Buy one, get one free.”Offering promotions to clientshelps drive traffic and create loyaltyamong customers, but figuring out the most effective and efficient way to hand out these rewards, especially for large merchants,can be a challenge.Your role as a web developer is to make these incredibly important promotions affordable, simple to use, and built in a way that doesn’t slow down a merchant’s online store.That’s why when a Shopify Plus customer recentlyapproached mewith their problems running promotions, I knew they’d make a good fit for Shopify’s newScriptsfeature.Scripts are micro-customizations that let you write your own code to address the complex needs of enterprise-level merchants. Unlike apps, Scripts run custom code on Shopify’s servers – letting you focus on delighting your clients without having to worry about a lot of support or maintenance headaches.Because Scripts run within Shopify’s environment, they also have the advantage of achieving tasks without resorting to workarounds that can lead to even larger headaches elsewhere.The catch with using cutting edge tools is thatresourcescan be scarce in the early days; that’s why today I’m going to walk you through how I helped Plus merchantEvy’s Treetackle their promotion problems using Shopify Scripts.You might also like:Creating Useful CSS Hooks in LiquidEvy’s TreeBased in Santa Rosa, Evy’s Tree is a women’s apparel brand that makes high-end hoodies. While the company was working hard to build their reach, diversify their offers, and increase their yearly revenue year after year, something was holding them back.Whenever they ran a ‘Buy One, Get One Free’ deal or offered tiered discounts to their customers, they ran into serious issues.There are lots of applications that offer a variety of salesset-ups, but many were failing Evy’s Tree. Often, the apps were too clunky and difficult to configure for the sorts of promotions the merchant wanted to run – and sometimes the desired deals weren’t possible to run at all.To make matters worse, many of the apps Evy’s Tree used worked by creating alternate products and variants with different prices. This not only clogged up the Admin, but also meant serious consistency issues were cropping up with inventory.According to Evy’s Tree IT Lead SamanthaDonohue, the way the company was doing promotions wasn’t flexible enough and was costing them money.The problem is that most back-end systems make you choose between high availability and scalability, at the cost of flexibility. In this day and age, that just doesn’t work.“At Evy’s Tree, our business is growing at an orders of magnitude rate year-over-year, and a big part of that is our strategy to utilize our data to respond to industry, customer, and seasonal trends in real time. The problem is that most back-end systems make you choose between high availability and scalability, at the cost of flexibility. In this day and age, that just doesn’t work.”Find your new favoriteMarkdown editorin our roundup.Can you say Scripts?It was a no brainer that Shopify Scripts would offer the right solution to the problems Evy’s Tree was facing.Scripts gives stores a way to write custom Ruby that is run on Shopify’s servers, and affects carts at a fundamental level, meaning things like line item level discounts can be applied, without the sort of hackery that existing applications need to perform.Now that you’ve got an idea of what Scripts are at a high level, and why we thought it would be a good fit for this situation, I’m going to walk you through the steps we took at a technical level to implement them for Evy’s Tree.1. ResearchBecause we hadn’t dealt with scripts before, we first set out to learn as much as possible about them – how they were implemented, what limitations they had, and whether there were any best practices we should follow.This meant reading through Shopify’s detailedscripts documentation, their open-source repository ofsample scripts, and checking out thescripts demo store. The key things we learned at this stage were:Scripts are written in a stripped-down version of Ruby, and work by receiving an “input” cart, performing transformations on line items, and returning the resulting “output” cart.Scripts are standalone – you can’t make any external API or database calls to fetch additional information.The Shopify Scripts Team have developed a pattern for structuring Scripts code in a modular and reusable way, breaking the application of script logic down intoCampaigns,Selectors,Partitioners, andDiscounts. We’ll take a look at each of these in a second.2. ExperimentationThey say that the best way to learn is through doing, and I feel that that goes double for coding! Now that we had some idea on how scripts were put together, it was time to start playing around in a sandboxed environment and see what we could write ourselves.We jumped into a test store, got theScript Editor appinstalled, and opened up the editor. (It’s worth noting thateven though Scripts can only be used by Shopify Plus merchants in production, if you’re a ShopifyPartner, you’re able to test them out on any development stores you create)When you first open the app, it gives you the option of loading one of a range of template scripts into the editor. These give you a start on handling a bunch of common scenarios, such as offering a fixed dollar amount off certain products, or calculating bulk discounts.As an example, here’s the demo “percentage off for a specific product” script:Even if you aren’t super familiar with Ruby, reading through this should give you a good idea of how scripts operate. We loop through the line items of anInput.cartobject, check to see if the line item is for a specific product (and that it isn’t a gift card), and if the line item matches, we discount its price by 10 per cent. As a final step, we return the adjusted cart object by assigning it toOutput.cartUsing these simple template scripts as a base, we experimented with the parameters involved, and tested out what pieces of information were available from within the scripts. Doing this helped us acquire the following knowledge:You can only have a single script running on your store (“published”) at any one time.How to use the script editor’s “preview” functionality to test the scripts we were editing against simulated carts in real-time.It’s a good idea to be liberal withputsstatements at each step of your code, to help debug what’s happening in your script in the Script Editor’s output console.You only have access to a limited amount of information about the cart, the products in the cart, and the current store and customer. For example, you can’t select products based on their membership in a particular collection, but you can select them based on tag, vendor, or product type.3. Script ImplementationNow that we’d gotten our feet wet and had an idea of how a script was put together, it was time to attempt implementing a solution for the real-world promotion Evy’s Tree wanted to run: “Buy the set, get 10% off” a pair of newly released hoodies.At this stage, we could have taken the approach of writing a one-off script for this promotion in the fashion of the template scripts – something pretty direct and simple that handled just this one scenario. However, there were a couple of things we knew:It would be useful for Evy’s Tree to be able to tweak the parameters of this script themselves, without having to constantly rely on us.It was likely that we’d want to run multiple promotions at the same time in the future.It was likely that we’d want to be able to expand the capabilities of the script down the line – for example, to easily swap out a percentage discount for a fixed dollar amount discount.Given all of that, we decided to model our scripts on the patterns laid out by the Shopify Scripts team in their example scripts. This pattern uses an object-oriented, class-driven approach to break the different logical functions of scripts into isolated pieces. This makes it both easier to reason about what the different parts of your script are doing, and also easier to mix, match and share components between different scripts.Here’s a quick overview of the different roles under this pattern:Selectors:objects that identify the line items and products that are of interest to your script. For example, aPriceSelectorwould select line items based on their price, and aTagSelectorwould select line items based on a product’s tags.Partitioners:objects that can “split up” line items based on your script’s needs. For example, if you were writing a “buy two, get one free” script, you could have anInterleavedPartitioner, which splits a line item with a product quantity of three into two separate line items, with quantities of two and one. Your 100 per cent discount could then be applied to that second line item.Discounts:objects that take the line items identified by your selectors and partitioners and actually apply a discount. You could have aPercentageDiscountapplying a percentage off a particular item, or aMoneyDiscountto reduce the price by a fixed amount.Campaigns:a campaign object is the “container” for a specific promotion or discount you want to run. A campaign can be initialised with one or more selectors, partitioners, and discount objects that work together to implement the overall logic for the campaign. One Shopify Script could have multiple campaigns running at the same time.Here’s an example of how all of these components can work together to create a series of campaigns, running at the same time in one script (for simplicity, the code that actually defines the selectors, partitioners, and discounts has been removed):For us, once we’d decided to use this pattern to implement the “Buy the set, get 10% off” script, we actually found that it made designing and implementing the script much easier, as we could focus on each bit of logic individually. We started by setting out what we’d need from each component:Aselectorcapable of identifying the two hoodies that were part of the promotion. For simplicity, we decided to specify a list of relevant product IDs in the script, so we were able to use theProductsSelectorprovided by Shopify.Apartitioner,which would check to see if all the products in the set were present in the cart. If so, it would return all line items to be discounted – if not, it would return no items. This would have to be custom written.Adiscount,which could apply 10 per cent to each line item identified by the selector and partitioner. For this, we could make use of thePercentageDiscountclass provided by Shopify.Finally, acampaignobject to tie each of these components together.As mentioned, we were able to reuse the selector and discount classes provided in the script example repository, meaning we only needed to write aProductSetPartitioner:And aBuySetGetXOffCampaign:Finally, we added a couple of variables likePRODUCTS_IN_SETandDISCOUNT_PERCENTto make things easy for Evy’s Tree staff to tweak and reuse this script, in case they wanted to run a similar promotion later on.If you'd like, you can view thefinal script.4. Theme implementationWe had the script up and running and had tested the logic, both within the Script Editor app, and when published on our development store. Now we needed to make sure that what customers saw in the theme and checkout matched what they were going to be charged.Along with the Script Editor, Shopify introduced some new Liquid variables for exactly this purpose. The most important ones for the purposes of displaying discount information areline_item.original_line_priceandline_item.message.Using the first, we’re able to tell if a particular line item has been discounted by a script, and the second allows us to display the message generated by our script explaining why the discount was applied.A final tweak we made for Evy’s Tree was on the checkout page. By default, Shopify Checkout displays line item discounts like this:However, the accompanying messageisn’tdisplayed. We wanted to keep the experience for customers as consistent as possible (and also make it clear to customers where their discounts were coming from if they went straight to checkout), so we used a little bit of Javascript to add in the message where possible:5. RefinementSince launching the promotion we’ve detailed above, we’ve come back to it a couple of times to extend the functionality or handle other edge cases.For example, Evy’s Tree wanted to occasionally run promotions where a customer only needed to purchase a minimum quantity of items to be eligible for the discount, not one of each item in the set.We could have implemented this as a separate script, but chose to leverage the code we already had and simply added a newMinimumQuantityPartitionerthat could slot into the existing campaign. Now, the store owners can determine the behaviour of the campaign by setting a simple variable at the top of the script, which affects which partitioner class is used.We’ve also been able to tackle more complex scripts to handle new types of promotions – deals like “Buy X, Get Y for Z% off”, where the mix of eligible products and sale products can change or have complicated rules around them.We had to resurface of our long-forgotten algebra skills for some of the more complex promotion logic.As we develop more and more experience with scripts, we’ll be able to handle more complex scenarios. This will be helped by the library of reusable classes and components we’re putting together (andcontributing backto the public scripts repository), and also by the module pattern advocated by the Shopify scripts team.A scalable solution for your Plus clientsAs you’ve hopefully gleaned from this post, Scripts offers your most successful clients a way to get advanced custom functionality, without compromising flexibility or maintainability. It’s a win for you as a developer, too – you don’t have to worry about maintaining applications or keeping servers running. And it’s improving all the time – the roadmap for Scripts has some exciting developments on the way, far beyond the discounting examples covered here.Whether you’re interested in using Scripts on your next client project, or are just curious about Shopify’s newest tool, I hope this case study has been helpful.Have a question for me? Reach out in the comments section below.You might also like:Using Metafields in Your Shopify Theme"
16,"So far in ourShopify tutorial serieswe've looked at a lot of concepts relating to how Liquid works in Shopify themes. In this article, I'd like to take a more in-depth look at one particular template —product.liquid.If you are new to Shopify themes,product.liquidis the template that is rendered by default whenever a customer views a product detail page. As discussed in a previous tutorial, it is also possible to havealternate product templates. You can also build a customizablerelated productssection. However in this post we'll stick to the basic template, which resides in thetemplatesfolder within a Shopify theme.By way of an example, I am going to use theproduct.liquidtemplate from my own starter theme “Birthday Suit”. Here it is in its entirety:<h2>{{ product.title }}</h2>{{ product.description }}<form action=""/cart/add"" method=""post"" enctype=""multipart/form-data""><select name=""id"">{% for variant in product.variants %}{% if variant.available == true %}<option value=""{{variant.id}}""> {{ variant.title }} for {{ variant.price | money_with_currency }}</option>{% else %}<option disabled=""disabled""> {{ variant.title }} - sold out!</option>{% endif %}{% endfor %}</select><input type=""submit"" name=""add"" id=""add"" value=""Add to Cart"" class=""button""></form>As you will see, there's very little HTML in this template. This is on purpose as it's intended as a starting block for your own theme. If you download a theme from the Shopify theme store, you'll notice that theproduct.liquidtemplate will be more involved but may not actually contain much more Liquid code.Let's examine what's happening in detail. We begin by using Liquid output to display the product's title and description:<h2>{{ product.title }}</h2>{{ product.description }}As the description is entered via the Shopify admin, we don't need to wrap this output with further HTML. Of course, if you need to add in a wrapper element of some sort then you can.Moving down the template, we come to theformand opening<select>element:<form action=""/cart/add"" method=""post"" enctype=""multipart/form-data""><select name=""id"">Theactionattribute is important – it must be set to/cart/addin order for products to be added to the cart. We also need to ensure that the<select>element has itsnameattribute set toid.Next comes the main output of the template:{% for variant in product.variants %}{% if variant.available == true %}<option value=""{{variant.id}}""> {{ variant.title }} for {{ variant.price | money_with_currency }}</option>{% else %}<option disabled=""disabled""> {{ variant.title }} - sold out!</option>{% endif %}{% endfor %}A few things are at work here:We create afor loopto iterate over all the current products variantsWe check to see if the current product in the loop has inventory using{% if variant.available == true %}If the product has inventory, we output the title in an<option>element and set the value of the<option>to the variantsid. As well as outputting the variant title, we output the price and use themoney_with_currencyfilter.If the product has no inventory, we output a disabled<option>element and output the title followed bysold out!Finally, we close off ourifstatement andforloopNext we add in a<input type=""submit"">that when clicked will add an available product to the cart:<input type=""submit"" name=""add"" id=""add"" value=""Add to Cart""> </form>We complete the template by closing out the</form>element.This template makes use of both theproductandvariantobjects. They have a large range of properties that you can display in this template and are worth investigating as you develop your Shopify theme skills.You might also like:10 Top Questions About Developing Shopify Themes AnsweredExtending the templateOf course this example is relatively simplistic and is intended as a starting point for your own development. There's a lot more you could include in this template including:Adding in Liquid code to display product andvariant imagesUse the Shopify JavaScript snippetoption_selection.jsto allow better display of variant optionsUse the| tfilter for retrieving translated strings from your theme'slocale fileLearning Liquid: Getting Started with Shopify ThemingGet this free guide and learn practical tips, tricks, and techniques to start modifying, developing, and building Shopify themes.EmailGet free copyBy entering your email - we’ll also send you marketing emails related to Shopify. You can unsubscribe anytime. Note: the guide won't be delivered to role-based emails, like info@, developer@, etc.Our virtual cogs are turning.Please note that it can take upto 15 minutes for our emailto reach your inbox."
17,"Many of us use the<body>class for CSS and JavaScript hooks and just like in WordPress it’s pretty easy to add a number of useful classes to our<body>element in Shopify.Here are a few ideas that you might find useful placing in your main (or alternate) layout file:Add the currently rendered template name to the body class<body class=""{{ template | handleize }}"">In this example, we are usingtemplateto return the name of the currently used template. Some examples of this are:<body class=""index""><body class=""product""><body class=""collection"">This can be really useful when you need to target a specific alternate template for example.Add the currently rendered product handle to the body classBuilding on this we may wish to add the current producthandleto our body class. To keep things neat and tidy we can use anifstatement to conditionally add the product handle only when we are viewing a product:<body class=""{{ template }}{% if template == ""product"" %} {{ product.handle }}{% endif %}"">Note how I include the space before the{{ product.handle }}output tag.If you are using alternate product templates you may wish to use thecontainsoperator instead:<body class=""{{ template }}{% if template contains ""product"" %} {{ product.handle }}{% endif %}"">Add the current page title to the body classSome themes also add the current page title to the body element in the form of an id, building on the above our code would now look as follows:<body id=""{{ page_title | handleize }}"" class={{ template }}{% if template == ""product"" %} {{ product.handle }}{% endif %}"">Note in this example we are using the Liquid filterhandleizeto ensure that theidorclassthat we add is URL safe and therefore easy to reference in our CSS and JS files. For example, it will turn a page title of “Blue Jeans” into “blue-jeans”.Add the currently viewed collection’s name to the body classFor good measure, we could even add in a check for collections and add that too:<body id=""{{ page_title | handleize }}"" class={{ template }}{% if template == ""product"" %} {{ product.handle }}{% endif %}{% if template == ""collection"" %} {{ collection.handle }}{% endif %}"">It’s pretty easy to adjust this logic for your own purposes. Again you may wish to use thecontainsoperator if you are utilising alternate templates.SummaryHopefully you’ve seen how flexible Liquid is in the above examples. Being able to add a variety of classes to the<body>element gives us useful hooks that we can use in CSS and JavaScript.Learning Liquid: Getting Started with Shopify ThemingGet this free guide and learn practical tips, tricks, and techniques to start modifying, developing, and building Shopify themes.EmailGet free copyBy entering your email - we’ll also send you marketing emails related to Shopify. You can unsubscribe anytime. Note: the guide won't be delivered to role-based emails, like info@, developer@, etc.Our virtual cogs are turning.Please note that it can take upto 15 minutes for our emailto reach your inbox."
18,"One of the (many) features I love about working with Shopify Themes is the simple folder structure. Each store can be powered by a single layout file and a handful of templates meaning you can achieve a lot with a little — power in simplicity.However if you are new to Shopify Themes, you may not know exactly when each template gets rendered, or be aware that the same template gets used in various places around the store.We've already looked at how to use both alternatelayoutandtemplatefiles, therefore in this article we'll turn our focus to understanding under what conditions each template is rendered in a store.While we're on the topic of URLs, learn more about what acanonical URLis, and why they're so important.URL template mappingInternally, Shopify has its own routing table which determines which template is displayed based on the URL requested by the user. If you have ever used one of the popular development frameworks, you might be familiar with the concept of URL routing. Put simply it's a way of determining which template to send to the browser based on the requested URL.I mentioned earlier that there are only a handful of templates required to power a store. Each of these templates serves one or more URL — in other words, we are able to utilise the same templates for multiple URLs. From a design perspective, this enables us to reduce our overhead when building a new store.You might also like:Using Metafields in Your Shopify ThemeURLs to templatesHere's an overview of which template is rendered as determined by the URL:/thisisntarealurl → 404.liquid/blogs/{blog-name}/{article-id-handle} → article.liquid/blogs/{blog-name} → blog.liquid/cart → cart.liquid/collections → list-collections.liquid/collections/{collection-handle} → collection.liquid/collections/{collection-handle}/{tag} → collection.liquid/ → index.liquid/pages/{page-handle} → page.liquid/products → list-collections.liquid/products/{product-handle} → product.liquid/search?q={search-term} → search.liquidPassword protectedYou might have noticed that thepassword.liquidtemplate is not included in the list. This template is only seen if you choose to password protect your storefront and as such will override all other URLs.If your store is password protected and you do not have apassword.liquidtemplate in your theme, Shopify will render it's default password login page instead.Alternate templatesIt's also worth remembering that the above routing table can be affected by alternate templates — something we have covered ina previous tutorial.URL parametersAs you will see above, a number of the routes have elements of the URL path wrapped in{ }. I have included this to denote a variable which will have an impact on the data loaded into a template.For example, if we take the/collections/{collection-handle}URL pattern a different set of data will be loaded into the template and sent to the browser if we requested/collections/bikescompared to/collections/cars.You will also notice that a number of different URL patterns share the same template file, e.g/productsand/collectionswill both render thelist-collections.liquidtemplate. Likewise/collections/,/collections/{collection-handle}/and/collections/{collection-handle}/{tag}all make use ofcollection.liquid.Final noteIf you are ever unsure which template is being rendered, there's a really simple way to check.All you need to do is add{{ template }}to yourtheme.liquidfile and start browsing your store. This global Shopify variable will output the currently rendered template minus the.liquidextension. It's a neat way to be doubly sure your templates are working as expected.Here's a handy snippet that you can use in your own theme development with the output shown in the screenshot below:<p style=""display: inline-block; background: yellow; border: 1px solid #CCC; padding: 1em; font-weight: 700;"">Current template: {{ template }}.liquid</p>Want to learn more about building with Shopify? Check out our full list ofShopify tutorials.You might also like:How to Optimize Themes for Performance"
19,"Starting a new Shopify project for a client is very exciting. You’re itching to put your first design ideas in Sketch and get a working prototype ready for your client to review. The problem is that before you get to any of the fun stuff, you end up wasting a few hours on the web searching for quality product data like product images, names, descriptions, and prices.Alternatively, deciding touseLorem Ipsum generatorsor the same product image over and over again for your design may be a shortcut, but this approach will not showcase a meaningful and realistic concept of the final product. However, there’s good news. We have compiled quality product data, like beautiful product images, into JSON. This data can be imported intoSketch Data Populator, so you can start using realistic product info in three easy steps.Why use realistic data? The makers of Sketch Data Populator, Precious Design Studio, believe designers should work with meaningful and realistic data as early as possible in the design process for the following reasons:Content informs design decisions (and helps you convey your purpose)Data is relentless (so UI components must be designed for robustness)It's fun (seeing your design evolve with meaningful data is motivating and rewarding)Sketch Data Populator will not only make you more productive, it will change the way you design user interfaces. So, let’s get started:You might also like:2 Real-Time Features That Every Developer Should Include in Their Ecommerce SitesStep 1: Install Sketch Shopify Data PopulatorWe forked the Sketch Data Populator project on Github to add our own presets of product data and have modified the name. You can install the Sketch Shopify Data Populatoron Github.Download Data PopulatorView RepositoryDownload the ZIP file (or clone the repository)Move the fileSketch Shopify Data Populator.sketchplugininto your Sketch Plugins folder. In Sketch 3, choosePlugins › Reveal Plugins Folder…to open it.Step 2: Design your layout and name your layersFor this tutorial, we’ll populate a product grid and product detail layout with realistic product data using the presets in the plugin. Starting with the grid layout, we will want to display an image, product name, and price as a 3-row and 3-column layout. To do that, we’ll draw a rectangle shape to host our product image with two text fields, product name and price, in Sketch:The names of the layers shown above reflect the named variables in our JSON file, but feel free to mix and match variables to create your own unique layouts in your own designs going forward. Here’s a sample of the JSON file with all of the variables listed:Now we’ll design our product detail page layout with one large featured image, three thumbnail images, a product name, a price, and a description. The layers are named to match the JSON variables we saw above in the JSON snippet.Step 3: Populate with real dataNow that we have designed our product layout and named our layers, it is time to populate them with real data from our plugin presets. Let’s start with our grid layout. Highlight the layers, go to Plugins > Sketch Shopify Data Populator > Populate with Preset. Make sure that ‘apparel’ is selected from the dropdown preset, check ‘Create Grid’, set your setting, and click Populate.That’s it! Your product grid is now populated with meaningful and realistic products.If you would like to cycle through the other products available in the data presets, go to Plugins, hover over Sketch Data Populator, and click Populate again. Alternatively, you can perform the following shortcut: Command + Shift + XFor our Product Detail page, we’ll use the same concepts as the grid above with a couple of new data variables to get dynamic thumbnails and full product descriptions:Now we can select all of the layers: go to Plugins > Sketch Shopify Data Populator > Populate with Preset > Uncheck ‘Create Grid’ > Click ‘Populate’. When we populate again, our design will dynamically add thumbnails to the product, if thumbnails are available for that product.Here’s a look at the final layout complete with product info and dynamic thumbnails:Using Real Data for More Meaningful PrototypesClients sometimes have a hard time visualizing how a prototype will lead to a final product. Working with real data for your concepts will help you make better informed design decisions, and when you’re ready to present the concept to your client, you’ll be able to show them a prototype that reflects a realistic final product. Better yet, if your client already has a Shopify store or products, try to incorporate their actual product images and descriptions to really wow them when you present your final concept.In this post, we saw how easy it can be to start using real data with the Sketch Shopify Data Populator and its built-in presets, so you can hit the ground running with your next project. Start using quality images and product data resources mentioned within this article next time you’re working in Sketch to build better informed and meaningful designs.You might also like:5 Simple Google Analytics Reports You Should Create for Every Client"
20,"I am sure many of you are more than familiar withLiquid control tagssuch asifandelse, but are you familiar with case/when?Here's how theShopify docsdescribe it:Case/when creates a switch statement to compare a variable with different values. case initializes the switch statement, and when compares its values.Here's an example:{% assign handle = 'cake' %} {% case handle %}{% when 'cake' %}This is a cake{% when 'cookie' %}This is a cookie{% else %}This is not a cake nor a cookie{% endcase %}In this instance, the output will be determined when the variable calledhandleis ""equal"" to ""cake"" or is equal to ""cookie"". If neither condition evaluates totrue,it will output the text after the lastelseclause.If you omit theelseclause and the handle variable never evaluates totrue,no output will be output. This is because theelseclause acts as a fallback in the above example.Real world exampleAs nice as our example is, you might be wondering when you might use this in your own theme development.One example I have used in the past is in relation to banners in a theme. Despite my love ofalternate templates, there are occasions where creating a variety of templates simply to display different promotional banners would be very time-consuming. Not only would you have to build the templates, but you'd also have to assign them to each product in turn. A more practical approach is to let Shopify do the heavy lifting for you.Let's say we wanted to display different promo banners on particular products. One way we could do this is to use product handles andcase/when. This code example will work in aproduct.liquidtemplate.{% assign handle = product.handle %}{% case handle %}{% when 'coffee-cup' %}{% include 'promo-coffee-cup' %}{% when 'cup-saucer' %}{% include 'promo-cup-saucer' %}{% else %}{% include 'promo-default' %}{% endcase %}We start off by creating a variable calledhandleand assign it the current value ofproduct.handle. If you aren't familiar with handles then thedocshave a great primer to get you started. Next we instantiate ourcaseclause. What follows is a series ofwhenstatements.In our example, if our product handleequalscoffee-cupthen the snippet titledpromo-coffee-cupwill be included and Shopify will head right toendcaseand carry on.Alternatively, if the product handle isequaltocup-saucerthen the snippet titledpromo-cup-saucerwill be included. If the product handle is neithercoffee-cuporcup-saucerthen theelseclause kicks in and the snippet titledpromo-defaultwill be output.We have achieved quite a lot with a little. We are conditionally loading different snippets depending on the product being viewed and outputting a default promo banner if neither condition is met. We've also achieved this without having to create any alternate templates.To extend the example, you could simply add in further specific product handles when needed. However, an alternative approach might be needed if you wanted to include tens of different banners. Of course, there's many different ways to achieve the same thing in Liquid and in a future tutorial we'll look at how to use other Liquid constructs such as contains and unless to achieve similar results.You might also like:Ways to Customise the img element in Shopify Themes"
21,"In early December of last year, we hosted our first Partner Session webinar. In the webinar, we covered the basics of designing themes for the Shopify platform. From theme structure to the basics of Liquid, attendees got the full picture of what it takes to develop a beautiful and functional Shopify theme.At the end of the hour-long webinar, we opened the floor to a Q&A session where we answered several questions from our attendees. We noticed that many of these questions touched upon important aspects of the theme building process and had potential value for the partner community outside of the webinar — so we decided to share them.With that being said, here are the top 10 questions from the webinar answered.Explore Shopify Liquid Code ExamplesVisit our searchable library of Liquid code examples based around theme components. Learn how various Liquid objects, properties, and filters work together as part of components within a theme. Add them directly into themes to build and customize themes faster and more reliably.Visit Shopify Liquid Code Examples1. Are there any Liquid IDEs available for Macs and PCs?There aren’t any specific IDEs created purely for Liquid. However, you can build Shopify themes through any modern browser using Shopify’s admin tool. You can also install theShopify Theme Gem, which will allow you to work locally and have your changes synced to your development or live store in the background. Text editors including Atom and Sublime also have Liquid syntax highlighting packages available. You can also extend Atom's functionality with theseAtom packages.2. How can I add a logo from the assets folder within liquid?Upload your logo image file to the assets folder and use the following Liquid code snippet:{{ ‘name_of_your_file.jpg’ | asset_url | img_tag }}3. What is the recommended way to create a “sandbox” for a production site? Can you “clone” an existing Shopify site and move into a development sandbox?The first step is to create a free Shopify Development store through your Partner dashboard, getyour free Partner account here. A Development store gives you access to all the features of a paid Shopify store for free, you even perform test transactions. On the live Shopify store export the current theme to a zip file which you can upload to your Development Store. To down a current theme navigate to: ‘online store’ > ‘Themes’ > click the ‘ … ‘ button, this will provide you with a dropdown > click ‘Download theme file’. Zip up the downloaded files and navigate to the themes page in your development store and click ‘Upload Theme’.Furthermore, you can export the product detail and images from the live store as a CSV file and import them to your sandbox environment so you can work with your client’s products. Navigate to the products page in the Shopify admin and click ‘export’, download the CSV and import it in your sandbox environment.4. Is it possible to set up custom product types to have 2 different kind of product templates?Yes, this is possible. On the online theme editor inside the Shopify admin inside the Templates folder you will see a link to “Add a new template”. This will prompt you to create a new template. Select, product from the dropdown list and then provide you template with a unique name. You are then able to pick off the relevant product template you would like when editing an individual product in the admin.5. How can we add classes or styling to the generated html, like the featured image?You can add classes to a liquid img tag like so:{{ image | img_tag: 'alternate text', 'css-class', 'small' }}If you’re looking to add inline styles, I suggest using this alternative:<img src=""{{ 'hero.png' | asset_url }}"" 100="""" />To learn more about the img tag please visitour documentation.6. How do you know which objects are available in which templates? Is there a list of this somewhere in the documentation? e.g. {{product.name}} is available in which liquid files?For a full list of available Liquid and Shopify tags available, variables, and properties available in the templates please visit thisShopify Cheat Sheet.7. Are there statistics around theme sales? I’m deciding if it’s a smart business move to build themes. Perhaps there is an “average sales / theme / year” stat?In 2014, $4,158,700 was paid to theme developers. If you're interested in building themes with Shopify, learn more by checking out ourapproval process for theme submission.8. Is product_img_url -> srcset possible?Yes, srcset is possible with the following code:{{ product.featured_image }}<img src=""{{ product.featured_image | product_img_url: "" small="""" srcset=""{{ product.featured_image | product_img_url: "" medium="""" 1000w="""" product="""" featured_image="""" product_img_url:="""" large="""" 2000w="""" alt=""My Awesome Product"" />If you would like to learn more about srcset, you can learn more onCSS Tricks.9. Shopify provides various global assets such as “shopify_common.js”, “option_selection.js”, etc. However, I have had difficulty finding what those global assets actually do and which pages they affect and should be included in. Could you give some insights or links to documentation for those?Our in depth documentation has many details about our global theme assets includingcustomers accountsanddependant variant selectors.10. Are there any resources that you could recommend for royalty free images to use as example products in a theme?Yes, and in fact we have a great post on our Web Design Blog with a list of10 of our favourite stock photography websites.You might also like:4 Advanced Shopify Theming Techniques to Add to Your Workflow"
22,"For this week's advanced Liquid Shopify tutorial, we'll be looking at a way to access product information without having to loop over a collection or be on a product detail page.We can achieve this by usingall_products. Here’s a quick example:{{ all_products[""coffee-cup""].title }}Let’s have a look at what’s happening. The syntax is pretty simple: all_products takes a quoted product handle as its argument.Or, learn how to build a customizablerelated productssection.Liquid HandlesIf you aren’t familiar with handles, the Shopifydocsprovide a great explanation:The handle is used to access the attributes of a Liquid object. By default, it is the object's title in lowercase with any spaces and special characters replaced by hyphens (-). Every object in Liquid (product, collection, blog, menu) has a handle. For example, a page with the title ""About Us"" can be accessed in Liquid via its handle “about-us”.In the above example, we have a handle ofcoffee-cupwhich represents the product available at yourstore.com/products/coffee. We follow that by.title.When rendered, this will output the title of the product with the handle ofcoffee-cup.Usingall_productswe can access any property of the product:all_products[""coffee-cup""].availableall_products[""coffee-cup""].collectionsall_products[""coffee-cup""].compare_at_price_maxall_products[""coffee-cup""].compare_at_price_minall_products[""coffee-cup""].compare_at_price_variesall_products[""coffee-cup""].contentall_products[""coffee-cup""].descriptionall_products[""coffee-cup""].featured_imageall_products[""coffee-cup""].first_available_variantall_products[""coffee-cup""].handleall_products[""coffee-cup""].idall_products[""coffee-cup""].imagesall_products[""coffee-cup""].imageall_products[""coffee-cup""].optionsall_products[""coffee-cup""].priceall_products[""coffee-cup""].price_maxall_products[""coffee-cup""].price_minall_products[""coffee-cup""].price_variesall_products[""coffee-cup""].selected_variantall_products[""coffee-cup""].selected_or_first_available_variantall_products[""coffee-cup""].tagsall_products[""coffee-cup""].template_suffixall_products[""coffee-cup""].titleall_products[""coffee-cup""].typeall_products[""coffee-cup""].urlall_products[""coffee-cup""].variantsall_products[""coffee-cup""].vendorNote that some of the returned values will be a Liquid collection and because of this would need to be “looped” over. Let’s use theimagescollection as an example:{% for image in all_products[""coffee-cup""].images %} ​<img src=""{{ image.src | img_url: 'grande' }}"" /> ​{% endfor %}This example would output all of the images associated with the coffee-cup product.More than one handleYou can go one step further and create a simple Liquid array of handles that you can use to output specific products. Here’s an example:{% assign favourites = ""hand-made-coffee-tamper|edible-coffee-cup"" | split: ""|"" %}<ul>{% for product in favourites %}<li>{{ all_products[product].title }}<li>{% endfor %}</ul>Using the Liquid assign tag, we create a new variable calledfavourites, which are product handles separated by a|character. The|is used as a delimiter to divide the string into an array that we can loop over using for.We now have access to both products in turn and can output any property associated with it — in the example above I simply display the title.When to use all_productsall_productsis a great option when you need to pull out a couple of products in a particular template, or when you might be buildingShopify sections. Of course, if you are outputting a lot of products, a collection is still the best way forward — principally as you won’t have to manually know all the different product handles. However, all_products makes a great option when you have need of outputting a single, or small number of products, that won't change frequently.You might also like:An In-Depth Look Into Designing a Shopify Theme"
23,"This is the second article in a series of advanced Liquid tutorials for designers and theme development. My previous post focused onhow to create and use alternate templateswhen creating Shopify themes, however today I would like to turn our attention to Liquid “layout” files.If you aren’t familiar with layouts you’ll find the default file, theme.liquid, in the “layouts” folder within your theme directory. If you’ve never seen one before you might be wondering what’s going on!The theme.liquid file can be thought of as the master template for your store. Effectively it’s a wrapper for all our other templates found in the templates folder. As a general rule, elements that are repeated in a theme (ex: site navigations, header, footer, etc.) will be often be placed inside theme.liquid.It’s entirely up to the theme designer to decide how much, or little, code is included in a layout file. For example, I often prefer to have certain elements of a layout file included as a snippet as this allows me to re-use them in alternate layout files — a topic we’ll cover shortly.Just remember that all rendered pages in a Shopify theme, unless stated, will be based on the default theme.liquid layout file.You might also like:How to Use Alternate Templates in Shopify Theme DevelopmentThe benefits of layout filesOne of the main benefits of layouts is that they enable us to follow the DRY (Don’t Repeat Yourself) principle. By having all our common elements in a single file, it allows us to make global changes very easily. Another benefit is that our templates (product.liquid, collection.liquid etc) aren’t cluttered with markup that is repeated across the store.Are you working with Visual Studio Code for development? Check out our article on thebest Visual Studio Code extensions.Creating a layout fileRegardless of how much HTML you include in a layout file, there are two important Liquid tags that you must include in a Shopify layout file:{{ content_for_header }}must be placed between the opening and closing <head> tag. This inserts the necessary Shopify scripts into the <head> which includes scripts for Google Analytics, Shopify analytics, for Shopify apps, and more.{{ content_for_layout }}must be placed between the opening and closing <body> tag. This outputs dynamic content generated by all of the other templates (index.liquid, product.liquid, etc.).theme.liquid, along with its two required placeholders tags, are required in order for Shopify to validate a theme.Alternate layoutsOne layout file isn’t going to cover every eventuality and there will be situations where you will require a completely different layout. You could start hiding elements with CSS but that feels a little wrong - the far better approach is to create an alternate layout complete with different HTML markup.A good example of this might be a specific landing page for a product or perhaps a newsletter sign up page that doesn’t require the same “site furniture” as the rest of the site. In these situations, it’s possible to designate that the micro render with an “alternative” layout file.Creating an alternative layout is very straightforward. The first thing to do is create a new file and give it a relevant name and the .liquid extension. Next save it in the layouts folder in your theme directory. In this file place any HTML you need (i.e. HTML declarations, CSS, JS links etc) along with the two placeholders discussed above.In order to use this layout file, and effectively override the default theme.liquid layout file, we use the following Liquid syntax as the first line in any of a template file (index.liquid, product.liquid, etc.):{% layout 'alternative' %}In this instance, the default theme.liquid will be not be applied but rather the layout called alternative.liquid.It’s also possible to request that the layout file isn't applied. The syntax to request that a layout file isn't applied is:{% layout none %}This needs to be the first line at the top of the relevant template (index.liquid, product.liquid, etc.). A use case for this might be when rendering output from your store in an alternative syntax such as JSON.Take a look at some of the topprototyping toolsand howrapid prototypingcan help your design and development process.Using snippets to be even more DRYIf I know that a theme will be using multiple layouts I often remove code out of the layout file and into a snippet. This means that I can reuse code across multiple layouts. For example, I often have the following structure:snippets/html-header.liquid- Contains all the essential head items right up to the opening body tagsnippets/html-footer.liquid- Contains any relevant script tags and the closing body tagsnippets/header.liquid- The main header that is used across the majority of the sitesnippets/footer.liquid- The main footer that is used across the majority of the siteIn order to use these are base layout file would look as follows:{% include html-header %}
{% include header %}
{% include footer %}
{% include html-footer %}The benefit of this approach is that when you come to create an alternate layout file you don’t need to recreate all your HTML header and footer content meaning you can update it all from two files. If you are only using one or two layouts it’s perhaps overkill.Start using alternate layouts in your Shopify theme development workflowAlternate layout files can come in extremely handy when you require radically different markup for a particular page or set of pages. Coupled together with the use of alternate templates it’s a powerful tool in your theme building toolbox and literally gives you endless possibilities to customise the look and feel of a store.You might also like:How to Optimize Themes for Performance"
24,"Theming a shop for the holiday season is a clever way to turn casual browsers into buying customers. When your client’s shop is themed for the holidays, it will excite their visitors and get them into the holiday shopping spirit.In this tutorial, I’ll go over four simple ways that you can theme a shop without a lot of effort, so you can give your client's store a quick holiday make-over just in time for the holiday rush.Plus: read to the bottom to find out how you can win the Christmas Mockup Scene Generator tool that I use in this tutorial!For this demo, I’ll be using Shopify’sNew Standard Themeas my base.Most of the time, it’s a nice minimalist theme that can showcase a wide range of products, but in the spirit of the holidays, it could use a little sprucing up.For my holiday store redesign, I’m going to use this beautifulChristmas Mockup Scene GeneratorbyVisual Hierarchy. This bundle comes with several pre-made scenes which can be easily customized, or you can build your own scenes with the high resolution items included in the bundle. The pre-made scenes and items are formatted for Photoshop and organized into easy-to-read layers.You can also find tons of otherChristmas resourceson Creative Market. Just make sure to find a set of resources that matches your client’s brand image to create a look and feel that is consistent with their store during the rest of the year.Once you've sourced your holiday-themed design assets, follow these four simple steps to complete your ecommerce store's holiday design makeover.You might also like:5 Creative Strategies for Using Overlays to Boost Conversions During the HolidaysStep 1: Add a beautiful background imageAdding a holiday-themed background image to your shop is the easiest and most effective way to update a store for the holidays. Use a large image to ensure that it will look great on any screen regardless of size.An image with dimensions of 1,400 pixels by 1,400 pixels is a good size to start with, but try to reduce the file size as much as possible. The last thing you want to do is increase your page load time, as this will actually repel rather than attract customers. When a page doesn’t load quickly enough, visitors are known to hit that back button or go somewhere else. Make sure your client’sonline store is fully optimized for speedso they don’t lose those impatient buyers.To begin, choose a background image from the Christmas Mockup Scene Generator (or whatever other design resource you've decided to use). For my store, I've chosen this lovely red coloured background with festive details on the sides.Once you've created or chosen a background image, it’s time to implement it into the store theme. To make this look really great, you’re going to want to ensure that the background image fills the entirety of the screen. Most Shopify themes have the capability to set a background image through a simple image upload, but if you’re using a theme doesn’t support this feature, you can customize it with the following code snippet:If you would like to learn more about the this code snippet, check out this post on CSS-Tricks and how to createperfect full page images.After uploading your background image and previewing it on your site, don’t hesitate to tweak the image. In this case, my original background image was prominently red. This turned out to be a bit too bold and took too much focus away from the products, so I decided to change the red into a festive solid gold.Taking that extra few minutes to get your background image just right will help maintain your visitors’ focus on the most important page elements.Step 2: Add a top banner for sale items or promosIt’s probably safe to say that your clients will be running special promos and sales this holiday season. Let’s make sure that their visitors clearly know about them by adding a seasonally-themed top banner with all the special promo and sale details, plus a “Call-To-Action” button. For our shop, we want to promote our holiday shipping rate and delivery time after spending over $50.I also created a button that reads “Shop Now,” which can be linked to any part of the shop. Use this opportunity to bring customers to bestselling products, current sale items, high margin items, or any set of product categories that you think will help your clients increase sales. In this case, I linked the button to the Cyber Monday sales page.Here's the final result:To add a top banner to your shop, open the theme.liquid file for your shop, find where your header for the site begins, and then add the following code:We also added a small Christmas stocking to style the banner image and reinforce the holiday theme for our shop. It’s a subtle change, but it brings extra attention to our top banner that contains valuable information for holiday shoppers.You might also like:5 Design Tips to Boost Conversions this Holiday SeasonStep 3: Add holiday-themed hero imagesStyling the hero images on your homepage is also an easy win to theme a shop for the holidays. Whetheryou purchased a set of resources or designed your own, get creative by placing your products on a Christmas scene or even making a collage of some best-selling products.Using Visual Hierarchy’s scene generator once again, I created a Christmas background with one of our products at the centre of the scene.When creating these type of hero images with your client’s products, make sure that the product is the main focus. As much as we want spruce up our product pages, we don’t want the festive elements to distract from what your client is trying to sell.Using Photoshop, set to the holiday items to edge, then add a product image with a transparent background so that it blends nicely into the background scene.Pro-tipAdd a shadow to your product to match the shadows in your scene. This will create a more consistent and photo realistic scene.Step 4: Have some fun!It’s holiday shopping season, and while it can be a busy time of the year, we shouldn’t forget to have a little fun along the way. That’s why we added a Santa Claus hat to our cart button. Once again, it’s a simple change, but it adds a little fun and some extra holiday spirit to our shop.Deck the halls!And voila! Combine all of these design tweaks together and you have yourself a beautiful ecommerce store completely re-designed for the holidays.With some creativity and minimal effort, I added some holiday flair to my shop in 4 simple steps. It’s a great way to offer an additional service to your clients that will help them turn casual browsers into buying customers this holiday season. Take advantage of beautiful resources available online, get creative, and have some fun with these holiday theming techniques!You might also like:7 Steps to Get More Shopify Clients This Holiday Season"
25,"Let’s say you’ve got a client, and said client is a boutique owner. Arguably, the most powerful asset in their arsenal is their ability to showcase the brands that they have partnered with to sell.Enter the brands page: A quick, visually exciting way for customers to find new collections and brands that they know and trust. Pages like this are important because there is both brand recognition and a sense of trust. Your client's brand has proven to be established/trusted enough for other brands to want to be showcased.If you're launching a brand, be sure to check out our article on how to have a successfulbrand launch. Or, learn more about how to build an impactfullanding pagefor your Shopify clients.Now you come to realize that there is not a great way to showcase collections-within-collections so (being the problem solver that you are) you turn to the good oldwww.myshopify.com/collections/all.However, a problem arises. Now every collection you’ve ever created is here. So you get bags and blazers, as well as the trends/brands you want to showcase. So you do what any programmer/designer does — you try and jimmyrig it.You jump into the collection liquid and start typing away:{% unless collection.handle != 'bags' or collection.handle != 'blazers jackets' %}However, you realize quite quickly that while this will work in the interim, as soon as your client gets new stock or adds a new collection, your quick solution will go awry fairly quickly.The answer? Mixing Liquid with a link list.The first step to making all of your brand page dreams come true is getting all the collections in order.You might also like:The Power of Link ListsStep 1: Create collectionsCreate all the collections you’ll want to display, and get all the pictures you want to display for said collections in order. (Just like with products, everything looks better when it's the same size.)For me, I'll be building a brand's page so I'll be uploading all the different brand pictures into the collections.Step 2: Create a link list within the navigationThis is where you (or your client) can order/reorder the soon to be made brands/trends page. I called said link list “brands” just for this example. (But you can call it whatever you like.)Step 3: Create the page templateGo into the theme editor and click ""Edit HTML/CSS.""Next, you need to make a new page template. In this case I called it collections. Presto! You’ve got a new page template.Step 4: Populate the templateYou can view an example of the entire page template here.You might also like:Using Metafields in Your Shopify ThemeStep 5: Add the collection-within-collectionNow we need to add the elusive collection-within-collection. This is where all the magic happens. Create a new snippet and call it collection-within-collection.Step 6: Link it all upNow all you’ve got to do is create a brand’s page and change the template topage.collectionand click save.Step 7: Admire your handy workWhen you click on the collection pictures, they will link to all the products that are housed in said collection! It’s a really powerful tool. The best part is your client can easily switch the order and switch the collections out right from the link list we created (in this case, it’s called ""Brands"").Let me know if you have any questions, or if you’ve got some ideas that save you time with Shopify.And don’t forget to check out my noteson GitHub!You might also like:The Essential List of Resources for Shopify Theme Development"
26,"Recently, we provided a great list ofwebsites where you can download icon packsand explained how iconography can be used to effectively communicate with your visitors. Not only can icons enhance your site’s overall design, but they can be effectively used as tools to increase readability, highlight important content, and reinforce functionality or features.In this post, we will show you how to implement Scalable Vector Graphic (SVG) icons on your site in a few easy steps, and we’ll explain how you can take your icons to the next level with animations.You might also like:Designing with SVG: How Scalable Vector Graphics Can Increase Visitor EngagementWhy you should use SVG iconsWhen you start a new web project, you should always be thinking about the devices that run the web and that the web itself is ever-changing. While you can’t predict the future, you should always look for strategies to future-proof your web projects as best as you can.This is where SVG icons can help. Since SVGs are vector graphics, they are a great way to future-proof your site since they can scale from 20px by 20px to 1000px by 1000px without losing clarity. Plus, they are screen resolution independent meaning that they will retain their image quality without becoming pixelated on any screen resolution. Not too long ago, devices had very low resolution displays. Back then, we couldn’t have imagined the beautiful, high-density displays we now carry around in our pockets. As this progress continues, with recent developments such as the release of 4K displays, we must think proactively about our designs.By using SVG icons, you’re ensuring that your design will look great on any screen while maintaining a small file size. This is what makes SVGs unique compared to JPGs and PNGs, which require additional copies of the image file and sometimes extra javascript to determine which resolution should be displayed. Clearly, this is neither effective nor efficient.One of the many other benefits of using an SVG icon is that you can edit its size and colour via CSS. You can also animate them too. In this tutorial, we’ll be using icons fromicons8.com(this resource provides free icon packs provided that you credit their site). To follow along, simply download thesample codeprovided.Step 1: Downloading the SVG iconIcons8 provides HTML to implement SVG icons. This is the fastest and easiest way to add an icon to your site, and you won’t be required to upload an SVG file to your server. In this example, we will show you how to add a Facebook icon to your site.To access the icon below icon, visitthis page.Click on the “Generate HTML” button below the icon. This will show a pop-up window with HTML that you can copy and paste into your HTML file.Copy and paste the HTML into your HTML page.Add the CSS provided by Icon8 to your CSS File.Preview your page to see the Facebook SVG Icon.Step 2: Styling the SVG iconChanging the CSS fill attribute to “fill: #96BE4F;” changes the Facebook icon’s colour without any additional work.If you do not have access to the CSS file on your site, you can add inline styles on your HTML page by adding a < style > tag:Alternatively, you can use the Icons8 colour picker to select a colour for the Facebook icon.3. Animating the SVG iconTo animate SVG icons, we’re going to use a great Javascript library calledVivus. Vivus provides several out of the box animations and plenty of customization capabilities. To show you a quick example, we’ve animated the outlines of the Facebook icon. You can see the finished result below:Vivus provides a great set of documentation, but we will keep things simple. We will include the vivus.js file in our html and add the following call:To view the animated icon, simply refresh your page. If you’d like to customize your animations or view other presets, visit theVivus.js Github page.Start using icons in your designsI hope that this post has shown you how easy it is to add an SVG icon to your site and animate it using just a few lines of code and a javascript library. By following the three steps outlined in this tutorial, you are now able to create a great user experience while future-proofing your site and saving time along the way.Have any questions about this tutorial? Let me know in the comments.You might also like:How to Build Amazing Web Design Animations — No Programming Required"
27,"I, probably like many of you reading this article, struggle to cope with the deluge of beeps, pings, and whooshes all vying for my attention countless times per day. Long gone are the days when the ping of a new email would get me excited. These days notifications have become personal; they growl at me from screens, vibrate from pockets and even tap, unapologetically, on my wrist.“Stop what you are doing, this is really important!” is the attitude conveyed by most notifications even if what they report is seldom so. Notifications and alert messages have become the boy who cried wolf; I no longer listen to them as I know they rarely are important.As a Shopifystore owner, I can choose to receive email notifications, push notifications on my desktop browser, alerts on my phone, or alerts on my watch. The resulting noise from a single sale on my store could easily wake the cat!Although all of these nags are mutable (the ability to choose what notifications to receive is a great feature with Shopify), I still want to receive some kind of alert when an order is placed or when there's a spike in traffic. I just want something that isn’t so distracting; something gentle that says “hey, something has happened, but don’t worry, nothing to worry about.” So, I decided to build something.The first thing to decide had to be which non-critical notifications I actually want. As these notifications are not to be intrusive, I decided to show activity on the site; cart updates, sales and traffic spikes.Fortunately, Shopify has the ability to postwebhookswhen certain conditions are met. That seemed liked a good way to go as these are pretty much instant, certainly faster than using a service likeIFTTTto monitor emails for sales activity.I have been known to make the odd IoT gadget and love the interaction of physical objects with data. So I set about gathering some components to make what I was calling the ‘Notification Bug’.The idea was simple: when an order gets placed a slow pulse of light would gently notify me. This notification wouldn’t require any interaction from me and would disappear just as stealthily as it appeared. A similar pulse of light would also notify me of a cart update or spike in traffic, and these would be distinguishable from each other through the use of different coloured lights. An array of RGB LED’s could handle that for me quite comfortably and with very little power required.I wanted this little device to be standalone, just requiring power from the USB socket so it could be plugged in anywhere. The finished device works great plugged into the back of a TV (most modern TV’s have a USB port) and creating a gentle glow behind the screen when my store receives an order. This guarantees high-fives in my house.Here's the final product:How I Built My BugHere's how you can build your own notification gadget for your store or your client's.Parts required:Photon wifi Dev kitNeopixels Jewel - 7 pixel RGBWireSolderUSB leadPLA for 3D printerThe first thing I needed was a housing for the ‘bug.’ It would have to be something small and semi opaque to allow the transfer of light. This was a perfect opportunity to warm up the 3D printer and design something custom.After many iterations, I decided on a simple circular housing. About the half the width, but twice the height of a cookie, the housing seems small enough to fit anywhere but just large enough to fit the Photon board, Neopixels, and a small light diffuser. With a thickness of just 8mm, light would ‘glow’ from what seemed to be a solid object. I chose arctic white PLA fromFaberdasheryas I have had very good results and finishes with this particular PLA in the past.Next up, was the soldering of the Neopixels Jewel directly to the Photon board. Simple enough once I trimmed down the headers. Neopixels have pull up resistors as standard so a direct connection works fine. With just three wires to connect, this was a breeze. One to  3.3v, one to ground, one to a pin - in this case D5.Next, I used a hole punch to make a hole in the housing allowing for a mini USB cable to power the board (which also has the nifty feature of holding the lid of the gadget in place.) The gadget now has its final form — at this point it just needs code to come alive.Now I needed the gadget to listen for notifications from Shopify. The Photon works independently of a computer with its own wifi chip and processor. A Photon connects to the Spark cloud where it can listen for ‘events’ which can then trigger routines. All pretty simple using the subscribe method.The final part of the puzzle was to direct the webhook POST data from Shopify to the Spark Cloud. We don’t actually require any of the JSON data sent with the POST request, just a way to 'ping' the Spark cloud. My PHP is a little rusty but I just about managed to use cURL to process the POST request. This little PHP script just sits on my own server and awaits a POST request from a Shopify webhook.Flash the Photon with the code below, upload the PHP scripts to a PHP enabled server and add the URL of these scripts to the Shopify notifications panel and you are ready to go. Voila! Gentle notifications for you or your client that require no action.Get the code"
